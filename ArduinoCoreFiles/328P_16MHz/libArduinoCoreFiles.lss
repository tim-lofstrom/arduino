In archive libArduinoCoreFiles.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000118a  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .text         00000000  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  00000000  00000000  0000003c  2**0
                  ALLOC
  4 .stab         00000c60  00000000  00000000  0000003c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .stabstr      00001605  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .text._ZN14HardwareSerial9availableEv 00000018  00000000  00000000  000022a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._ZN14HardwareSerial4peekEv 0000001c  00000000  00000000  000022b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN14HardwareSerial4readEv 00000028  00000000  00000000  000022d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z14serialEventRunv 0000001c  00000000  00000000  000022fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN14HardwareSerial17_tx_udr_empty_irqEv 00000042  00000000  00000000  00002319  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN14HardwareSerial5flushEv 00000044  00000000  00000000  0000235b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN14HardwareSerial5writeEh 0000008e  00000000  00000000  0000239f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14HardwareSerial5beginEmh 000000ca  00000000  00000000  0000242d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14HardwareSerial3endEv 00000044  00000000  00000000  000024f7  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text._ZN14HardwareSerial17availableForWriteEv 0000001e  00000000  00000000  0000253b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  00002559  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .comment      00000012  00000000  00000000  00002569  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	fc 01       	movw	r30, r24
   2:	91 8d       	ldd	r25, Z+25	; 0x19
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	22 8d       	ldd	r18, Z+26	; 0x1a
   6:	89 2f       	mov	r24, r25
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	80 5c       	subi	r24, 0xC0	; 192
   c:	9f 4f       	sbci	r25, 0xFF	; 255
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	82 1b       	sub	r24, r18
  10:	91 09       	sbc	r25, r1
  12:	8f 73       	andi	r24, 0x3F	; 63
  14:	99 27       	eor	r25, r25
  16:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	fc 01       	movw	r30, r24
   2:	91 8d       	ldd	r25, Z+25	; 0x19
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	82 8d       	ldd	r24, Z+26	; 0x1a
   6:	98 17       	cp	r25, r24
   8:	01 f0       	breq	.+0      	; 0xa <_ZN14HardwareSerial4peekEv+0xa>
   a:	82 8d       	ldd	r24, Z+26	; 0x1a
   c:	e8 0f       	add	r30, r24
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	f1 1d       	adc	r31, r1
  10:	85 8d       	ldd	r24, Z+29	; 0x1d
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	08 95       	ret
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	9f ef       	ldi	r25, 0xFF	; 255
  return tail - head - 1;
  1a:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	fc 01       	movw	r30, r24
   2:	91 8d       	ldd	r25, Z+25	; 0x19
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	82 8d       	ldd	r24, Z+26	; 0x1a
   6:	98 17       	cp	r25, r24
   8:	01 f0       	breq	.+0      	; 0xa <_ZN14HardwareSerial4readEv+0xa>
   a:	82 8d       	ldd	r24, Z+26	; 0x1a
   c:	df 01       	movw	r26, r30
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	a8 0f       	add	r26, r24
  10:	b1 1d       	adc	r27, r1
  12:	5d 96       	adiw	r26, 0x1d	; 29
  14:	8c 91       	ld	r24, X
  16:	92 8d       	ldd	r25, Z+26	; 0x1a
  18:	9f 5f       	subi	r25, 0xFF	; 255
  return tail - head - 1;
  1a:	9f 73       	andi	r25, 0x3F	; 63
}
  1c:	92 8f       	std	Z+26, r25	; 0x1a
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	08 95       	ret
  22:	8f ef       	ldi	r24, 0xFF	; 255
  24:	9f ef       	ldi	r25, 0xFF	; 255
  26:	08 95       	ret

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	89 2b       	or	r24, r25
   6:	01 f0       	breq	.+0      	; 0x8 <_Z14serialEventRunv+0x8>
   8:	80 e0       	ldi	r24, 0x00	; 0
   a:	90 e0       	ldi	r25, 0x00	; 0
   c:	89 2b       	or	r24, r25
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	01 f0       	breq	.+0      	; 0x10 <_Z14serialEventRunv+0x10>
  10:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  14:	81 11       	cpse	r24, r1
  16:	0c 94 00 00 	jmp	0	; 0x0 <_Z14serialEventRunv>
  return tail - head - 1;
  1a:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial17_tx_udr_empty_irqEv:

00000000 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	fc 01       	movw	r30, r24
   2:	84 8d       	ldd	r24, Z+28	; 0x1c
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	df 01       	movw	r26, r30
   6:	a8 0f       	add	r26, r24
   8:	b1 1d       	adc	r27, r1
   a:	a3 5a       	subi	r26, 0xA3	; 163
   c:	bf 4f       	sbci	r27, 0xFF	; 255
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	2c 91       	ld	r18, X
  10:	84 8d       	ldd	r24, Z+28	; 0x1c
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	01 96       	adiw	r24, 0x01	; 1
  16:	8f 73       	andi	r24, 0x3F	; 63
  18:	99 27       	eor	r25, r25
  return tail - head - 1;
  1a:	84 8f       	std	Z+28, r24	; 0x1c
}
  1c:	a6 89       	ldd	r26, Z+22	; 0x16
  1e:	b7 89       	ldd	r27, Z+23	; 0x17
  20:	2c 93       	st	X, r18
  22:	a0 89       	ldd	r26, Z+16	; 0x10
  24:	b1 89       	ldd	r27, Z+17	; 0x11
  26:	8c 91       	ld	r24, X
  28:	80 64       	ori	r24, 0x40	; 64
  2a:	8c 93       	st	X, r24
  2c:	93 8d       	ldd	r25, Z+27	; 0x1b
  2e:	84 8d       	ldd	r24, Z+28	; 0x1c
  30:	98 13       	cpse	r25, r24
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x34>
  34:	02 88       	ldd	r0, Z+18	; 0x12
  36:	f3 89       	ldd	r31, Z+19	; 0x13
  38:	e0 2d       	mov	r30, r0
  3a:	80 81       	ld	r24, Z
  3c:	8f 7d       	andi	r24, 0xDF	; 223
  3e:	80 83       	st	Z, r24
  40:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	ec 01       	movw	r28, r24
   6:	88 8d       	ldd	r24, Y+24	; 0x18
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_ZN14HardwareSerial5flushEv+0xc>
   c:	ea 89       	ldd	r30, Y+18	; 0x12
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	fb 89       	ldd	r31, Y+19	; 0x13
  10:	80 81       	ld	r24, Z
  12:	85 fd       	sbrc	r24, 5
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN14HardwareSerial5flushEv+0x16>
  16:	a8 89       	ldd	r26, Y+16	; 0x10
  18:	b9 89       	ldd	r27, Y+17	; 0x11
  return tail - head - 1;
  1a:	8c 91       	ld	r24, X
}
  1c:	86 fd       	sbrc	r24, 6
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14HardwareSerial5flushEv+0x20>
  20:	0f b6       	in	r0, 0x3f	; 63
  22:	07 fc       	sbrc	r0, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN14HardwareSerial5flushEv+0x26>
  26:	80 81       	ld	r24, Z
  28:	85 ff       	sbrs	r24, 5
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN14HardwareSerial5flushEv+0x2c>
  2c:	a8 89       	ldd	r26, Y+16	; 0x10
  2e:	b9 89       	ldd	r27, Y+17	; 0x11
  30:	8c 91       	ld	r24, X
  32:	85 ff       	sbrs	r24, 5
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN14HardwareSerial5flushEv+0x36>
  36:	ce 01       	movw	r24, r28
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5flushEv>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN14HardwareSerial5flushEv+0x3e>
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	88 8f       	std	Y+24, r24	; 0x18
  12:	9b 8d       	ldd	r25, Y+27	; 0x1b
  14:	8c 8d       	ldd	r24, Y+28	; 0x1c
  16:	98 13       	cpse	r25, r24
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN14HardwareSerial5writeEh+0x1a>
  return tail - head - 1;
  1a:	e8 89       	ldd	r30, Y+16	; 0x10
}
  1c:	f9 89       	ldd	r31, Y+17	; 0x11
  1e:	80 81       	ld	r24, Z
  20:	85 fd       	sbrc	r24, 5
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14HardwareSerial5writeEh+0x24>
  24:	f6 2e       	mov	r15, r22
  26:	0b 8d       	ldd	r16, Y+27	; 0x1b
  28:	10 e0       	ldi	r17, 0x00	; 0
  2a:	0f 5f       	subi	r16, 0xFF	; 255
  2c:	1f 4f       	sbci	r17, 0xFF	; 255
  2e:	0f 73       	andi	r16, 0x3F	; 63
  30:	11 27       	eor	r17, r17
  32:	e0 2e       	mov	r14, r16
  34:	8c 8d       	ldd	r24, Y+28	; 0x1c
  36:	e8 12       	cpse	r14, r24
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN14HardwareSerial5writeEh+0x3a>
  3a:	0f b6       	in	r0, 0x3f	; 63
  3c:	07 fc       	sbrc	r0, 7
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14HardwareSerial5writeEh+0x40>
  40:	e8 89       	ldd	r30, Y+16	; 0x10
  42:	f9 89       	ldd	r31, Y+17	; 0x11
  44:	80 81       	ld	r24, Z
  46:	85 ff       	sbrs	r24, 5
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN14HardwareSerial5writeEh+0x4a>
  4a:	ce 01       	movw	r24, r28
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5writeEh>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN14HardwareSerial5writeEh+0x52>
  52:	8b 8d       	ldd	r24, Y+27	; 0x1b
  54:	fe 01       	movw	r30, r28
  56:	e8 0f       	add	r30, r24
  58:	f1 1d       	adc	r31, r1
  5a:	e3 5a       	subi	r30, 0xA3	; 163
  5c:	ff 4f       	sbci	r31, 0xFF	; 255
  5e:	f0 82       	st	Z, r15
  60:	0b 8f       	std	Y+27, r16	; 0x1b
  62:	ea 89       	ldd	r30, Y+18	; 0x12
  64:	fb 89       	ldd	r31, Y+19	; 0x13
  66:	80 81       	ld	r24, Z
  68:	80 62       	ori	r24, 0x20	; 32
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN14HardwareSerial5writeEh+0x6c>
  6c:	ee 89       	ldd	r30, Y+22	; 0x16
  6e:	ff 89       	ldd	r31, Y+23	; 0x17
  70:	60 83       	st	Z, r22
  72:	e8 89       	ldd	r30, Y+16	; 0x10
  74:	f9 89       	ldd	r31, Y+17	; 0x11
  76:	80 81       	ld	r24, Z
  78:	80 64       	ori	r24, 0x40	; 64
  7a:	80 83       	st	Z, r24
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	1f 91       	pop	r17
  86:	0f 91       	pop	r16
  88:	ff 90       	pop	r15
  8a:	ef 90       	pop	r14
  8c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEmh:

00000000 <_ZN14HardwareSerial5beginEmh>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	ec 01       	movw	r28, r24
  10:	6a 01       	movw	r12, r20
  12:	7b 01       	movw	r14, r22
  14:	12 2f       	mov	r17, r18
  16:	e8 89       	ldd	r30, Y+16	; 0x10
  18:	f9 89       	ldd	r31, Y+17	; 0x11
  return tail - head - 1;
  1a:	82 e0       	ldi	r24, 0x02	; 2
}
  1c:	80 83       	st	Z, r24
  1e:	41 15       	cp	r20, r1
  20:	51 4e       	sbci	r21, 0xE1	; 225
  22:	61 05       	cpc	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN14HardwareSerial5beginEmh+0x28>
  28:	60 e0       	ldi	r22, 0x00	; 0
  2a:	79 e0       	ldi	r23, 0x09	; 9
  2c:	8d e3       	ldi	r24, 0x3D	; 61
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	a7 01       	movw	r20, r14
  32:	96 01       	movw	r18, r12
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  38:	da 01       	movw	r26, r20
  3a:	c9 01       	movw	r24, r18
  3c:	01 97       	sbiw	r24, 0x01	; 1
  3e:	a1 09       	sbc	r26, r1
  40:	b1 09       	sbc	r27, r1
  42:	b6 95       	lsr	r27
  44:	a7 95       	ror	r26
  46:	97 95       	ror	r25
  48:	87 95       	ror	r24
  4a:	ac 01       	movw	r20, r24
  4c:	41 15       	cp	r20, r1
  4e:	80 e1       	ldi	r24, 0x10	; 16
  50:	58 07       	cpc	r21, r24
  52:	00 f0       	brcs	.+0      	; 0x54 <_ZN14HardwareSerial5beginEmh+0x54>
  54:	e8 89       	ldd	r30, Y+16	; 0x10
  56:	f9 89       	ldd	r31, Y+17	; 0x11
  58:	10 82       	st	Z, r1
  5a:	60 e8       	ldi	r22, 0x80	; 128
  5c:	74 e8       	ldi	r23, 0x84	; 132
  5e:	8e e1       	ldi	r24, 0x1E	; 30
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	a7 01       	movw	r20, r14
  64:	96 01       	movw	r18, r12
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEmh>
  6a:	ba 01       	movw	r22, r20
  6c:	a9 01       	movw	r20, r18
  6e:	41 50       	subi	r20, 0x01	; 1
  70:	51 09       	sbc	r21, r1
  72:	61 09       	sbc	r22, r1
  74:	71 09       	sbc	r23, r1
  76:	76 95       	lsr	r23
  78:	67 95       	ror	r22
  7a:	57 95       	ror	r21
  7c:	47 95       	ror	r20
  7e:	ec 85       	ldd	r30, Y+12	; 0x0c
  80:	fd 85       	ldd	r31, Y+13	; 0x0d
  82:	50 83       	st	Z, r21
  84:	ee 85       	ldd	r30, Y+14	; 0x0e
  86:	ff 85       	ldd	r31, Y+15	; 0x0f
  88:	40 83       	st	Z, r20
  8a:	18 8e       	std	Y+24, r1	; 0x18
  8c:	ec 89       	ldd	r30, Y+20	; 0x14
  8e:	fd 89       	ldd	r31, Y+21	; 0x15
  90:	10 83       	st	Z, r17
  92:	ea 89       	ldd	r30, Y+18	; 0x12
  94:	fb 89       	ldd	r31, Y+19	; 0x13
  96:	80 81       	ld	r24, Z
  98:	80 61       	ori	r24, 0x10	; 16
  9a:	80 83       	st	Z, r24
  9c:	ea 89       	ldd	r30, Y+18	; 0x12
  9e:	fb 89       	ldd	r31, Y+19	; 0x13
  a0:	80 81       	ld	r24, Z
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	80 83       	st	Z, r24
  a6:	ea 89       	ldd	r30, Y+18	; 0x12
  a8:	fb 89       	ldd	r31, Y+19	; 0x13
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
  b0:	ea 89       	ldd	r30, Y+18	; 0x12
  b2:	fb 89       	ldd	r31, Y+19	; 0x13
  b4:	80 81       	ld	r24, Z
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	80 83       	st	Z, r24
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	ff 90       	pop	r15
  c2:	ef 90       	pop	r14
  c4:	df 90       	pop	r13
  c6:	cf 90       	pop	r12
  c8:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	ec 01       	movw	r28, r24
   6:	e8 81       	ld	r30, Y
   8:	f9 81       	ldd	r31, Y+1	; 0x01
   a:	02 84       	ldd	r0, Z+10	; 0x0a
   c:	f3 85       	ldd	r31, Z+11	; 0x0b
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	e0 2d       	mov	r30, r0
  10:	09 95       	icall
  12:	ea 89       	ldd	r30, Y+18	; 0x12
  14:	fb 89       	ldd	r31, Y+19	; 0x13
  16:	80 81       	ld	r24, Z
  18:	8f 7e       	andi	r24, 0xEF	; 239
  return tail - head - 1;
  1a:	80 83       	st	Z, r24
}
  1c:	ea 89       	ldd	r30, Y+18	; 0x12
  1e:	fb 89       	ldd	r31, Y+19	; 0x13
  20:	80 81       	ld	r24, Z
  22:	87 7f       	andi	r24, 0xF7	; 247
  24:	80 83       	st	Z, r24
  26:	ea 89       	ldd	r30, Y+18	; 0x12
  28:	fb 89       	ldd	r31, Y+19	; 0x13
  2a:	80 81       	ld	r24, Z
  2c:	8f 77       	andi	r24, 0x7F	; 127
  2e:	80 83       	st	Z, r24
  30:	ea 89       	ldd	r30, Y+18	; 0x12
  32:	fb 89       	ldd	r31, Y+19	; 0x13
  34:	80 81       	ld	r24, Z
  36:	8f 7d       	andi	r24, 0xDF	; 223
  38:	80 83       	st	Z, r24
  3a:	8a 8d       	ldd	r24, Y+26	; 0x1a
  3c:	89 8f       	std	Y+25, r24	; 0x19
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial17availableForWriteEv:

00000000 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
   0:	fc 01       	movw	r30, r24
   2:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
   4:	44 8d       	ldd	r20, Z+28	; 0x1c
   6:	25 2f       	mov	r18, r21
   8:	30 e0       	ldi	r19, 0x00	; 0
   a:	84 2f       	mov	r24, r20
   c:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
   e:	82 1b       	sub	r24, r18
  10:	93 0b       	sbc	r25, r19
  12:	54 17       	cp	r21, r20
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZN14HardwareSerial17availableForWriteEv+0x16>
  16:	cf 96       	adiw	r24, 0x3f	; 63
  18:	08 95       	ret
  return tail - head - 1;
  1a:	01 97       	sbiw	r24, 0x01	; 1
}
  1c:	08 95       	ret

HardwareSerial0.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000084c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000012e4  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_18 00000064  00000000  00000000  00001b64  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.__vector_19 0000004c  00000000  00000000  00001bc8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z17Serial0_availablev 00000014  00000000  00000000  00001c14  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.startup._GLOBAL__sub_I___vector_18 0000005a  00000000  00000000  00001c28  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .ctors        00000002  00000000  00000000  00001c82  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 10 .bss.Serial   0000009d  00000000  00000000  00001c84  2**0
                  ALLOC
 11 .comment      00000012  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__vector_18:

00000000 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	8f 93       	push	r24
   e:	9f 93       	push	r25
  10:	ef 93       	push	r30
  12:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
  14:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  18:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1c:	80 81       	ld	r24, Z
  1e:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  22:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	82 fd       	sbrc	r24, 2
  28:	00 c0       	rjmp	.+0      	; 0x2a <__vector_18+0x2a>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
  2a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
  2c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  30:	8f 5f       	subi	r24, 0xFF	; 255
  32:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
  34:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  38:	82 17       	cp	r24, r18
  3a:	01 f0       	breq	.+0      	; 0x3c <__vector_18+0x3c>
      _rx_buffer[_rx_buffer_head] = c;
  3c:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	e0 50       	subi	r30, 0x00	; 0
  44:	f0 40       	sbci	r31, 0x00	; 0
  46:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
  48:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <__vector_18+0x4e>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
  4e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
  50:	ff 91       	pop	r31
  52:	ef 91       	pop	r30
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	2f 91       	pop	r18
  5a:	0f 90       	pop	r0
  5c:	0f be       	out	0x3f, r0	; 63
  5e:	0f 90       	pop	r0
  60:	1f 90       	pop	r1
  62:	18 95       	reti

Disassembly of section .text.__vector_19:

00000000 <__vector_19>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <__vector_19>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
  2a:	ff 91       	pop	r31
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
  2c:	ef 91       	pop	r30
  2e:	bf 91       	pop	r27
  30:	af 91       	pop	r26
  32:	9f 91       	pop	r25

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
  34:	8f 91       	pop	r24
  36:	7f 91       	pop	r23
  38:	6f 91       	pop	r22
  3a:	5f 91       	pop	r21
      _rx_buffer[_rx_buffer_head] = c;
  3c:	4f 91       	pop	r20
  3e:	3f 91       	pop	r19
  40:	2f 91       	pop	r18
  42:	0f 90       	pop	r0
  44:	0f be       	out	0x3f, r0	; 63
  46:	0f 90       	pop	r0
      _rx_buffer_head = i;
  48:	1f 90       	pop	r1
  4a:	18 95       	reti

Disassembly of section .text._Z17Serial0_availablev:

00000000 <_Z17Serial0_availablev>:
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_Z17Serial0_availablev>
   8:	21 e0       	ldi	r18, 0x01	; 1
   a:	89 2b       	or	r24, r25
   c:	01 f4       	brne	.+0      	; 0xe <_Z17Serial0_availablev+0xe>
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	82 2f       	mov	r24, r18
  12:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I___vector_18:

00000000 <_GLOBAL__sub_I___vector_18>:
   0:	e0 e0       	ldi	r30, 0x00	; 0
   2:	f0 e0       	ldi	r31, 0x00	; 0
   4:	13 82       	std	Z+3, r1	; 0x03
   6:	12 82       	std	Z+2, r1	; 0x02
   8:	88 ee       	ldi	r24, 0xE8	; 232
   a:	93 e0       	ldi	r25, 0x03	; 3
   c:	a0 e0       	ldi	r26, 0x00	; 0
   e:	b0 e0       	ldi	r27, 0x00	; 0
  10:	84 83       	std	Z+4, r24	; 0x04
  12:	95 83       	std	Z+5, r25	; 0x05

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
  14:	a6 83       	std	Z+6, r26	; 0x06
  16:	b7 83       	std	Z+7, r27	; 0x07
  18:	80 e0       	ldi	r24, 0x00	; 0
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	91 83       	std	Z+1, r25	; 0x01
  1e:	80 83       	st	Z, r24
  20:	85 ec       	ldi	r24, 0xC5	; 197
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	95 87       	std	Z+13, r25	; 0x0d
  26:	84 87       	std	Z+12, r24	; 0x0c
  28:	84 ec       	ldi	r24, 0xC4	; 196
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
  2a:	90 e0       	ldi	r25, 0x00	; 0
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
  2c:	97 87       	std	Z+15, r25	; 0x0f
  2e:	86 87       	std	Z+14, r24	; 0x0e
  30:	80 ec       	ldi	r24, 0xC0	; 192
  32:	90 e0       	ldi	r25, 0x00	; 0

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
  34:	91 8b       	std	Z+17, r25	; 0x11
  36:	80 8b       	std	Z+16, r24	; 0x10
  38:	81 ec       	ldi	r24, 0xC1	; 193
  3a:	90 e0       	ldi	r25, 0x00	; 0
      _rx_buffer[_rx_buffer_head] = c;
  3c:	93 8b       	std	Z+19, r25	; 0x13
  3e:	82 8b       	std	Z+18, r24	; 0x12
  40:	82 ec       	ldi	r24, 0xC2	; 194
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	95 8b       	std	Z+21, r25	; 0x15
  46:	84 8b       	std	Z+20, r24	; 0x14
      _rx_buffer_head = i;
  48:	86 ec       	ldi	r24, 0xC6	; 198
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	97 8b       	std	Z+23, r25	; 0x17
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
  4e:	86 8b       	std	Z+22, r24	; 0x16
    Serial._rx_complete_irq();
  }
  50:	11 8e       	std	Z+25, r1	; 0x19
  52:	12 8e       	std	Z+26, r1	; 0x1a
  54:	13 8e       	std	Z+27, r1	; 0x1b
  56:	14 8e       	std	Z+28, r1	; 0x1c
  58:	08 95       	ret

HardwareSerial1.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006c0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011cc  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY

HardwareSerial2.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006c0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011cc  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY

HardwareSerial3.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006c0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011cc  00000000  00000000  000006f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .text         00000000  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00000000  00000000  0000003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000000  00000000  00000000  0000003c  2**0
                  ALLOC
  4 .stab         00000b28  00000000  00000000  0000003c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .stabstr      0000156e  00000000  00000000  00000b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .text._ZNK9IPAddress7printToER5Print 00000084  00000000  00000000  000020d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  00002156  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  0000216a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9IPAddressC2Em 00000014  00000000  00000000  00002182  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddressC2EPKh 00000020  00000000  00000000  00002196  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddress10fromStringEPKc 00000066  00000000  00000000  000021b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEPKh 00000016  00000000  00000000  0000221c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN9IPAddressaSEm 0000000c  00000000  00000000  00002232  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZNK9IPAddresseqEPKh 0000001e  00000000  00000000  0000223e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev 00000016  00000000  00000000  0000225c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .ctors        00000002  00000000  00000000  00002272  2**1
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .rodata._ZTV9IPAddress 00000006  00000000  00000000  00002274  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 18 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  0000227a  2**0
                  ALLOC
 19 .comment      00000012  00000000  00000000  0000227a  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
{
    _address.bytes[0] = first_octet;
   c:	ef 92       	push	r14
    _address.bytes[1] = second_octet;
   e:	ff 92       	push	r15
    _address.bytes[2] = third_octet;
  10:	0f 93       	push	r16
    _address.bytes[3] = fourth_octet;
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	7c 01       	movw	r14, r24
  1a:	8b 01       	movw	r16, r22
  1c:	6c 01       	movw	r12, r24
  1e:	82 e0       	ldi	r24, 0x02	; 2
  20:	c8 0e       	add	r12, r24
  22:	d1 1c       	adc	r13, r1
  24:	47 01       	movw	r8, r14
  26:	e5 e0       	ldi	r30, 0x05	; 5
  28:	8e 0e       	add	r8, r30
  2a:	91 1c       	adc	r9, r1
  2c:	c0 e0       	ldi	r28, 0x00	; 0
  2e:	d0 e0       	ldi	r29, 0x00	; 0
  30:	f6 01       	movw	r30, r12
  32:	61 91       	ld	r22, Z+
  34:	6f 01       	movw	r12, r30
  36:	4a e0       	ldi	r20, 0x0A	; 10
  38:	50 e0       	ldi	r21, 0x00	; 0
  3a:	c8 01       	movw	r24, r16
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  40:	5c 01       	movw	r10, r24
  42:	6e e2       	ldi	r22, 0x2E	; 46
  44:	c8 01       	movw	r24, r16
  46:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  4a:	8a 0d       	add	r24, r10
  4c:	9b 1d       	adc	r25, r11
  4e:	c8 0f       	add	r28, r24
  50:	d9 1f       	adc	r29, r25
  52:	c8 14       	cp	r12, r8
  54:	d9 04       	cpc	r13, r9
  56:	01 f4       	brne	.+0      	; 0x58 <_ZNK9IPAddress7printToER5Print+0x58>
  58:	4a e0       	ldi	r20, 0x0A	; 10
  5a:	50 e0       	ldi	r21, 0x00	; 0
  5c:	f7 01       	movw	r30, r14
  5e:	65 81       	ldd	r22, Z+5	; 0x05
  60:	c8 01       	movw	r24, r16
  62:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  66:	8c 0f       	add	r24, r28
  68:	9d 1f       	adc	r25, r29
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	cf 90       	pop	r12
  7a:	bf 90       	pop	r11
  7c:	af 90       	pop	r10
  7e:	9f 90       	pop	r9
  80:	8f 90       	pop	r8
  82:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	12 82       	std	Z+2, r1	; 0x02
{
    _address.bytes[0] = first_octet;
   c:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[1] = second_octet;
   e:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[2] = third_octet;
  10:	15 82       	std	Z+5, r1	; 0x05
    _address.bytes[3] = fourth_octet;
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
    _address.bytes[1] = second_octet;
   e:	43 83       	std	Z+3, r20	; 0x03
    _address.bytes[2] = third_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
    _address.bytes[3] = fourth_octet;
  12:	05 83       	std	Z+5, r16	; 0x05
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	42 83       	std	Z+2, r20	; 0x02
{
    _address.bytes[0] = first_octet;
   c:	53 83       	std	Z+3, r21	; 0x03
    _address.bytes[1] = second_octet;
   e:	64 83       	std	Z+4, r22	; 0x04
    _address.bytes[2] = third_octet;
  10:	75 83       	std	Z+5, r23	; 0x05
    _address.bytes[3] = fourth_octet;
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	fb 01       	movw	r30, r22
{
    _address.bytes[0] = first_octet;
   c:	40 81       	ld	r20, Z
    _address.bytes[1] = second_octet;
   e:	51 81       	ldd	r21, Z+1	; 0x01
    _address.bytes[2] = third_octet;
  10:	62 81       	ldd	r22, Z+2	; 0x02
    _address.bytes[3] = fourth_octet;
  12:	73 81       	ldd	r23, Z+3	; 0x03
  14:	fc 01       	movw	r30, r24
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
  1e:	08 95       	ret

Disassembly of section .text._ZN9IPAddress10fromStringEPKc:

00000000 <_ZN9IPAddress10fromStringEPKc>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	dc 01       	movw	r26, r24
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	8a e0       	ldi	r24, 0x0A	; 10
   a:	fb 01       	movw	r30, r22
{
    _address.bytes[0] = first_octet;
   c:	41 91       	ld	r20, Z+
    _address.bytes[1] = second_octet;
   e:	bf 01       	movw	r22, r30
    _address.bytes[2] = third_octet;
  10:	44 23       	and	r20, r20
    _address.bytes[3] = fourth_octet;
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN9IPAddress10fromStringEPKc+0x14>
  14:	50 ed       	ldi	r21, 0xD0	; 208
  16:	54 0f       	add	r21, r20
  18:	5a 30       	cpi	r21, 0x0A	; 10
  1a:	00 f4       	brcc	.+0      	; 0x1c <_ZN9IPAddress10fromStringEPKc+0x1c>
  1c:	82 9f       	mul	r24, r18
  1e:	f0 01       	movw	r30, r0
  20:	83 9f       	mul	r24, r19
  22:	f0 0d       	add	r31, r0
  24:	11 24       	eor	r1, r1
  26:	9f 01       	movw	r18, r30
  28:	20 53       	subi	r18, 0x30	; 48
  2a:	31 09       	sbc	r19, r1
  2c:	24 0f       	add	r18, r20
  2e:	31 1d       	adc	r19, r1
  30:	47 fd       	sbrc	r20, 7
  32:	3a 95       	dec	r19
  34:	2f 3f       	cpi	r18, 0xFF	; 255
  36:	31 05       	cpc	r19, r1
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN9IPAddress10fromStringEPKc+0x3a>
  3a:	00 f0       	brcs	.+0      	; 0x3c <_ZN9IPAddress10fromStringEPKc+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN9IPAddress10fromStringEPKc+0x3e>
  3e:	4e 32       	cpi	r20, 0x2E	; 46
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN9IPAddress10fromStringEPKc+0x42>
  42:	93 30       	cpi	r25, 0x03	; 3
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN9IPAddress10fromStringEPKc+0x46>
  46:	fd 01       	movw	r30, r26
  48:	e9 0f       	add	r30, r25
  4a:	f1 1d       	adc	r31, r1
  4c:	22 83       	std	Z+2, r18	; 0x02
  4e:	9f 5f       	subi	r25, 0xFF	; 255
  50:	20 e0       	ldi	r18, 0x00	; 0
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN9IPAddress10fromStringEPKc+0x56>
  56:	93 30       	cpi	r25, 0x03	; 3
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN9IPAddress10fromStringEPKc+0x5a>
  5a:	15 96       	adiw	r26, 0x05	; 5
  5c:	2c 93       	st	X, r18
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	08 95       	ret
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fb 01       	movw	r30, r22
   2:	40 81       	ld	r20, Z
   4:	51 81       	ldd	r21, Z+1	; 0x01
   6:	62 81       	ldd	r22, Z+2	; 0x02
   8:	73 81       	ldd	r23, Z+3	; 0x03
   a:	fc 01       	movw	r30, r24
{
    _address.bytes[0] = first_octet;
   c:	42 83       	std	Z+2, r20	; 0x02
    _address.bytes[1] = second_octet;
   e:	53 83       	std	Z+3, r21	; 0x03
    _address.bytes[2] = third_octet;
  10:	64 83       	std	Z+4, r22	; 0x04
    _address.bytes[3] = fourth_octet;
  12:	75 83       	std	Z+5, r23	; 0x05
  14:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	42 83       	std	Z+2, r20	; 0x02
   4:	53 83       	std	Z+3, r21	; 0x03
   6:	64 83       	std	Z+4, r22	; 0x04
   8:	75 83       	std	Z+5, r23	; 0x05
   a:	08 95       	ret

Disassembly of section .text._ZNK9IPAddresseqEPKh:

00000000 <_ZNK9IPAddresseqEPKh>:
   0:	9b 01       	movw	r18, r22
   2:	bc 01       	movw	r22, r24
   4:	6e 5f       	subi	r22, 0xFE	; 254
   6:	7f 4f       	sbci	r23, 0xFF	; 255
   8:	44 e0       	ldi	r20, 0x04	; 4
   a:	50 e0       	ldi	r21, 0x00	; 0
{
    _address.bytes[0] = first_octet;
   c:	c9 01       	movw	r24, r18
    _address.bytes[1] = second_octet;
   e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddresseqEPKh>
    _address.bytes[2] = third_octet;
    _address.bytes[3] = fourth_octet;
  12:	21 e0       	ldi	r18, 0x01	; 1
  14:	89 2b       	or	r24, r25
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK9IPAddresseqEPKh+0x18>
  18:	20 e0       	ldi	r18, 0x00	; 0
  1a:	82 2f       	mov	r24, r18
  1c:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	e0 e0       	ldi	r30, 0x00	; 0
   2:	f0 e0       	ldi	r31, 0x00	; 0
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
   c:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
   e:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
  10:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
  12:	15 82       	std	Z+5, r1	; 0x05
  14:	08 95       	ret

PluggableUSB.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000119c  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .text         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  5 .stab         000012cc  00000000  00000000  00000044  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .stabstr      00001942  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .text._ZN5Print5writeEPKhj 00000056  00000000  00000000  00002c52  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5writeEPKc 0000002a  00000000  00000000  00002ca8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printEPK19__FlashStringHelper 00000048  00000000  00000000  00002cd2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Print5printERK6String 0000001c  00000000  00000000  00002d1a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN5Print5printEPKc 00000004  00000000  00000000  00002d36  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print5printEc 0000000e  00000000  00000000  00002d3a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text._ZN5Print5printERK9Printable 00000014  00000000  00000000  00002d48  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata.str1.1 00000011  00000000  00000000  00002d5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .text._ZN5Print7printlnEv 00000008  00000000  00000000  00002d6d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000024  00000000  00000000  00002d75  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnERK6String 00000024  00000000  00000000  00002d99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print7printlnEPKc 00000024  00000000  00000000  00002dbd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnEc 00000024  00000000  00000000  00002de1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print7printlnERK9Printable 00000024  00000000  00000000  00002e05  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print11printNumberEmh 00000092  00000000  00000000  00002e29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEli 00000094  00000000  00000000  00002ebb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print5printEii 0000000e  00000000  00000000  00002f4f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print7printlnEii 0000002e  00000000  00000000  00002f5d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print7printlnEli 00000024  00000000  00000000  00002f8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEmi 0000001a  00000000  00000000  00002faf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print5printEhi 0000000e  00000000  00000000  00002fc9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print7printlnEhi 0000002e  00000000  00000000  00002fd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print5printEji 0000000c  00000000  00000000  00003005  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEji 0000002c  00000000  00000000  00003011  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN5Print7printlnEmi 00000024  00000000  00000000  0000303d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN5Print10printFloatEdh 000001c6  00000000  00000000  00003061  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN5Print5printEdi 00000004  00000000  00000000  00003227  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN5Print7printlnEdi 00000024  00000000  00000000  0000322b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .rodata._ZTV5Print 00000008  00000000  00000000  0000324f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 36 .comment      00000012  00000000  00000000  00003257  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6c 01       	movw	r12, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
  return n;
}
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	ce 15       	cp	r28, r14
  1c:	df 05       	cpc	r29, r15
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Print5writeEPKhj+0x20>
  20:	d8 01       	movw	r26, r16
  22:	6d 91       	ld	r22, X+
  24:	8d 01       	movw	r16, r26
  26:	d6 01       	movw	r26, r12
  28:	ed 91       	ld	r30, X+
  2a:	fc 91       	ld	r31, X
  2c:	01 90       	ld	r0, Z+
  2e:	f0 81       	ld	r31, Z
  30:	e0 2d       	mov	r30, r0
  32:	c6 01       	movw	r24, r12
  34:	09 95       	icall
  36:	89 2b       	or	r24, r25
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN5Print5writeEPKhj+0x3a>
  3a:	7e 01       	movw	r14, r28
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN5Print5writeEPKhj+0x3e>
  3e:	21 96       	adiw	r28, 0x01	; 1
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN5Print5writeEPKhj+0x42>
  42:	c7 01       	movw	r24, r14
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	ff 90       	pop	r15
  4e:	ef 90       	pop	r14
  50:	df 90       	pop	r13
  52:	cf 90       	pop	r12
  54:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN5Print5writeEPKc+0x6>
   6:	fb 01       	movw	r30, r22
   8:	01 90       	ld	r0, Z+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN5Print5writeEPKc+0xe>
   e:	31 97       	sbiw	r30, 0x01	; 1
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	af 01       	movw	r20, r30
  12:	46 1b       	sub	r20, r22
  14:	57 0b       	sbc	r21, r23
  return n;
}
  16:	dc 01       	movw	r26, r24
  18:	ed 91       	ld	r30, X+
  1a:	fc 91       	ld	r31, X
  1c:	02 80       	ldd	r0, Z+2	; 0x02
  1e:	f3 81       	ldd	r31, Z+3	; 0x03
  20:	e0 2d       	mov	r30, r0
  22:	09 94       	ijmp
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
   e:	7b 01       	movw	r14, r22
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c0 e0       	ldi	r28, 0x00	; 0
  12:	d0 e0       	ldi	r29, 0x00	; 0
  14:	f7 01       	movw	r30, r14
  return n;
}
  16:	ec 0f       	add	r30, r28
  18:	fd 1f       	adc	r31, r29
  1a:	64 91       	lpm	r22, Z
  1c:	66 23       	and	r22, r22
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Print5printEPK19__FlashStringHelper+0x20>
  20:	d8 01       	movw	r26, r16
  22:	ed 91       	ld	r30, X+
  24:	fc 91       	ld	r31, X
  26:	01 90       	ld	r0, Z+
  28:	f0 81       	ld	r31, Z
  2a:	e0 2d       	mov	r30, r0
  2c:	c8 01       	movw	r24, r16
  2e:	09 95       	icall
  30:	89 2b       	or	r24, r25
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN5Print5printEPK19__FlashStringHelper+0x34>
  34:	21 96       	adiw	r28, 0x01	; 1
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
  38:	ce 01       	movw	r24, r28
  3a:	df 91       	pop	r29
  3c:	cf 91       	pop	r28
  3e:	1f 91       	pop	r17
  40:	0f 91       	pop	r16
  42:	ff 90       	pop	r15
  44:	ef 90       	pop	r14
  46:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	db 01       	movw	r26, r22
   8:	14 96       	adiw	r26, 0x04	; 4
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
   e:	15 97       	sbiw	r26, 0x05	; 5
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6d 91       	ld	r22, X+
  12:	7c 91       	ld	r23, X
  14:	02 80       	ldd	r0, Z+2	; 0x02
  return n;
}
  16:	f3 81       	ldd	r31, Z+3	; 0x03
  18:	e0 2d       	mov	r30, r0
  1a:	09 94       	ijmp

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEPKc>

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	e0 2d       	mov	r30, r0
   c:	09 94       	ijmp

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	db 01       	movw	r26, r22
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	11 97       	sbiw	r26, 0x01	; 1
   8:	01 90       	ld	r0, Z+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	f0 81       	ld	r31, Z
   c:	e0 2d       	mov	r30, r0
   e:	bc 01       	movw	r22, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cd 01       	movw	r24, r26
  12:	09 94       	ijmp

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	60 e0       	ldi	r22, 0x00	; 0
   2:	70 e0       	ldi	r23, 0x00	; 0
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print7printlnEv>

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	ef 92       	push	r14
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	cd b7       	in	r28, 0x3d	; 61
  return n;
}
  16:	de b7       	in	r29, 0x3e	; 62
  18:	a1 97       	sbiw	r28, 0x21	; 33
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	7c 01       	movw	r14, r24
  26:	fa 01       	movw	r30, r20
  28:	cb 01       	movw	r24, r22
  2a:	19 a2       	std	Y+33, r1	; 0x21
  2c:	22 30       	cpi	r18, 0x02	; 2
  2e:	00 f4       	brcc	.+0      	; 0x30 <_ZN5Print11printNumberEmh+0x30>
  30:	2a e0       	ldi	r18, 0x0A	; 10
  32:	8e 01       	movw	r16, r28
  34:	0f 5d       	subi	r16, 0xDF	; 223
  36:	1f 4f       	sbci	r17, 0xFF	; 255
  38:	42 2e       	mov	r4, r18
  3a:	51 2c       	mov	r5, r1
  3c:	61 2c       	mov	r6, r1
  3e:	71 2c       	mov	r7, r1
  40:	bf 01       	movw	r22, r30
  42:	a3 01       	movw	r20, r6
  44:	92 01       	movw	r18, r4
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  4a:	f9 01       	movw	r30, r18
  4c:	ca 01       	movw	r24, r20
  4e:	01 50       	subi	r16, 0x01	; 1
  50:	11 09       	sbc	r17, r1
  52:	6a 30       	cpi	r22, 0x0A	; 10
  54:	04 f4       	brge	.+0      	; 0x56 <_ZN5Print11printNumberEmh+0x56>
  56:	60 5d       	subi	r22, 0xD0	; 208
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN5Print11printNumberEmh+0x5a>
  5a:	69 5c       	subi	r22, 0xC9	; 201
  5c:	d8 01       	movw	r26, r16
  5e:	6c 93       	st	X, r22
  60:	23 2b       	or	r18, r19
  62:	24 2b       	or	r18, r20
  64:	25 2b       	or	r18, r21
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN5Print11printNumberEmh+0x68>
  68:	b8 01       	movw	r22, r16
  6a:	c7 01       	movw	r24, r14
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  70:	a1 96       	adiw	r28, 0x21	; 33
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	f8 94       	cli
  76:	de bf       	out	0x3e, r29	; 62
  78:	0f be       	out	0x3f, r0	; 63
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	df 91       	pop	r29
  7e:	cf 91       	pop	r28
  80:	1f 91       	pop	r17
  82:	0f 91       	pop	r16
  84:	ff 90       	pop	r15
  86:	ef 90       	pop	r14
  88:	7f 90       	pop	r7
  8a:	6f 90       	pop	r6
  8c:	5f 90       	pop	r5
  8e:	4f 90       	pop	r4
  90:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ec 01       	movw	r28, r24
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  return n;
}
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	ff 90       	pop	r15
  32:	ef 90       	pop	r14
  34:	df 90       	pop	r13
  36:	cf 90       	pop	r12
  38:	09 94       	ijmp
  3a:	2a 30       	cpi	r18, 0x0A	; 10
  3c:	31 05       	cpc	r19, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN5Print5printEli+0x40>
  40:	77 ff       	sbrs	r23, 7
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN5Print5printEli+0x44>
  44:	6d e2       	ldi	r22, 0x2D	; 45
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  4a:	8c 01       	movw	r16, r24
  4c:	44 27       	eor	r20, r20
  4e:	55 27       	eor	r21, r21
  50:	ba 01       	movw	r22, r20
  52:	4c 19       	sub	r20, r12
  54:	5d 09       	sbc	r21, r13
  56:	6e 09       	sbc	r22, r14
  58:	7f 09       	sbc	r23, r15
  5a:	2a e0       	ldi	r18, 0x0A	; 10
  5c:	ce 01       	movw	r24, r28
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  62:	80 0f       	add	r24, r16
  64:	91 1f       	adc	r25, r17
  66:	df 91       	pop	r29
  68:	cf 91       	pop	r28
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  70:	ef 90       	pop	r14
  72:	df 90       	pop	r13
  74:	cf 90       	pop	r12
  76:	08 95       	ret
  78:	2a e0       	ldi	r18, 0x0A	; 10
  7a:	b7 01       	movw	r22, r14
  7c:	a6 01       	movw	r20, r12
  7e:	ce 01       	movw	r24, r28
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	1f 91       	pop	r17
  86:	0f 91       	pop	r16
  88:	ff 90       	pop	r15
  8a:	ef 90       	pop	r14
  8c:	df 90       	pop	r13
  8e:	cf 90       	pop	r12
  90:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEli>

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	ab 01       	movw	r20, r22
   4:	77 0f       	add	r23, r23
   6:	66 0b       	sbc	r22, r22
   8:	77 0b       	sbc	r23, r23
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEii>

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	ab 01       	movw	r20, r22
   e:	77 0f       	add	r23, r23
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	66 0b       	sbc	r22, r22
  12:	77 0b       	sbc	r23, r23
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  return n;
}
  18:	8c 01       	movw	r16, r24
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  20:	80 0f       	add	r24, r16
  22:	91 1f       	adc	r25, r17
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	21 15       	cp	r18, r1
   2:	31 05       	cpc	r19, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN5Print5printEmi+0x6>
   6:	dc 01       	movw	r26, r24
   8:	ed 91       	ld	r30, X+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	09 94       	ijmp
  return n;
}
  16:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEmi>

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	46 2f       	mov	r20, r22
   4:	50 e0       	ldi	r21, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEhi>

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	46 2f       	mov	r20, r22
   e:	50 e0       	ldi	r21, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  return n;
}
  18:	8c 01       	movw	r16, r24
  1a:	ce 01       	movw	r24, r28
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	80 0f       	add	r24, r16
  22:	91 1f       	adc	r25, r17
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	ab 01       	movw	r20, r22
   4:	60 e0       	ldi	r22, 0x00	; 0
   6:	70 e0       	ldi	r23, 0x00	; 0
   8:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEji>

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	ab 01       	movw	r20, r22
   e:	60 e0       	ldi	r22, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  return n;
}
  16:	8c 01       	movw	r16, r24
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  1e:	80 0f       	add	r24, r16
  20:	91 1f       	adc	r25, r17
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  return n;
}
  16:	ff 92       	push	r15
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	6a 01       	movw	r12, r20
  20:	7b 01       	movw	r14, r22
  22:	b2 2e       	mov	r11, r18
  24:	9a 01       	movw	r18, r20
  26:	ab 01       	movw	r20, r22
  28:	c7 01       	movw	r24, r14
  2a:	b6 01       	movw	r22, r12
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  30:	88 23       	and	r24, r24
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN5Print10printFloatEdh+0x34>
  34:	60 e0       	ldi	r22, 0x00	; 0
  36:	70 e0       	ldi	r23, 0x00	; 0
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN5Print10printFloatEdh+0x3a>
  3a:	26 01       	movw	r4, r12
  3c:	37 01       	movw	r6, r14
  3e:	e8 94       	clt
  40:	77 f8       	bld	r7, 7
  42:	2f ef       	ldi	r18, 0xFF	; 255
  44:	3f ef       	ldi	r19, 0xFF	; 255
  46:	4f e7       	ldi	r20, 0x7F	; 127
  48:	5f e7       	ldi	r21, 0x7F	; 127
  4a:	c3 01       	movw	r24, r6
  4c:	b2 01       	movw	r22, r4
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  52:	81 11       	cpse	r24, r1
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN5Print10printFloatEdh+0x56>
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	3f ef       	ldi	r19, 0xFF	; 255
  5a:	4f e7       	ldi	r20, 0x7F	; 127
  5c:	5f e7       	ldi	r21, 0x7F	; 127
  5e:	c3 01       	movw	r24, r6
  60:	b2 01       	movw	r22, r4
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  66:	18 16       	cp	r1, r24
  68:	04 f4       	brge	.+0      	; 0x6a <_ZN5Print10printFloatEdh+0x6a>
  6a:	60 e0       	ldi	r22, 0x00	; 0
  6c:	70 e0       	ldi	r23, 0x00	; 0
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN5Print10printFloatEdh+0x70>
  70:	2f ef       	ldi	r18, 0xFF	; 255
  72:	3f ef       	ldi	r19, 0xFF	; 255
  74:	4f e7       	ldi	r20, 0x7F	; 127
  76:	5f e4       	ldi	r21, 0x4F	; 79
  78:	c7 01       	movw	r24, r14
  7a:	b6 01       	movw	r22, r12
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  80:	18 16       	cp	r1, r24
  82:	04 f4       	brge	.+0      	; 0x84 <_ZN5Print10printFloatEdh+0x84>
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	ce 01       	movw	r24, r28
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	9f 90       	pop	r9
  9c:	8f 90       	pop	r8
  9e:	7f 90       	pop	r7
  a0:	6f 90       	pop	r6
  a2:	5f 90       	pop	r5
  a4:	4f 90       	pop	r4
  a6:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print10printFloatEdh>
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	3f ef       	ldi	r19, 0xFF	; 255
  ae:	4f e7       	ldi	r20, 0x7F	; 127
  b0:	5f ec       	ldi	r21, 0xCF	; 207
  b2:	c7 01       	movw	r24, r14
  b4:	b6 01       	movw	r22, r12
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  ba:	87 fd       	sbrc	r24, 7
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN5Print10printFloatEdh+0xbe>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	a9 01       	movw	r20, r18
  c4:	c7 01       	movw	r24, r14
  c6:	b6 01       	movw	r22, r12
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  cc:	87 ff       	sbrs	r24, 7
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN5Print10printFloatEdh+0xd0>
  d0:	6d e2       	ldi	r22, 0x2D	; 45
  d2:	ce 01       	movw	r24, r28
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  d8:	4c 01       	movw	r8, r24
  da:	f7 fa       	bst	r15, 7
  dc:	f0 94       	com	r15
  de:	f7 f8       	bld	r15, 7
  e0:	f0 94       	com	r15
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_ZN5Print10printFloatEdh+0xe4>
  e4:	81 2c       	mov	r8, r1
  e6:	91 2c       	mov	r9, r1
  e8:	a1 2c       	mov	r10, r1
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	9f e3       	ldi	r25, 0x3F	; 63
  f2:	ab 14       	cp	r10, r11
  f4:	01 f0       	breq	.+0      	; 0xf6 <_ZN5Print10printFloatEdh+0xf6>
  f6:	20 e0       	ldi	r18, 0x00	; 0
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	40 e2       	ldi	r20, 0x20	; 32
  fc:	51 e4       	ldi	r21, 0x41	; 65
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 102:	a3 94       	inc	r10
 104:	00 c0       	rjmp	.+0      	; 0x106 <_ZN5Print10printFloatEdh+0x106>
 106:	9b 01       	movw	r18, r22
 108:	ac 01       	movw	r20, r24
 10a:	c7 01       	movw	r24, r14
 10c:	b6 01       	movw	r22, r12
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 112:	2b 01       	movw	r4, r22
 114:	3c 01       	movw	r6, r24
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 11a:	6b 01       	movw	r12, r22
 11c:	7c 01       	movw	r14, r24
 11e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 122:	9b 01       	movw	r18, r22
 124:	ac 01       	movw	r20, r24
 126:	c3 01       	movw	r24, r6
 128:	b2 01       	movw	r22, r4
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 12e:	2b 01       	movw	r4, r22
 130:	3c 01       	movw	r6, r24
 132:	2a e0       	ldi	r18, 0x0A	; 10
 134:	b7 01       	movw	r22, r14
 136:	a6 01       	movw	r20, r12
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 13e:	7c 01       	movw	r14, r24
 140:	e8 0c       	add	r14, r8
 142:	f9 1c       	adc	r15, r9
 144:	bb 20       	and	r11, r11
 146:	01 f0       	breq	.+0      	; 0x148 <_ZN5Print10printFloatEdh+0x148>
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	ce 01       	movw	r24, r28
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 152:	e8 0e       	add	r14, r24
 154:	f9 1e       	adc	r15, r25
 156:	db 2c       	mov	r13, r11
 158:	dd 20       	and	r13, r13
 15a:	01 f0       	breq	.+0      	; 0x15c <_ZN5Print10printFloatEdh+0x15c>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e2       	ldi	r20, 0x20	; 32
 162:	51 e4       	ldi	r21, 0x41	; 65
 164:	c3 01       	movw	r24, r6
 166:	b2 01       	movw	r22, r4
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 16c:	2b 01       	movw	r4, r22
 16e:	3c 01       	movw	r6, r24
 170:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 174:	4b 01       	movw	r8, r22
 176:	a1 2c       	mov	r10, r1
 178:	b1 2c       	mov	r11, r1
 17a:	2a e0       	ldi	r18, 0x0A	; 10
 17c:	b5 01       	movw	r22, r10
 17e:	a4 01       	movw	r20, r8
 180:	ce 01       	movw	r24, r28
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 186:	e8 0e       	add	r14, r24
 188:	f9 1e       	adc	r15, r25
 18a:	c5 01       	movw	r24, r10
 18c:	b4 01       	movw	r22, r8
 18e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	c3 01       	movw	r24, r6
 198:	b2 01       	movw	r22, r4
 19a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 19e:	2b 01       	movw	r4, r22
 1a0:	3c 01       	movw	r6, r24
 1a2:	da 94       	dec	r13
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <_ZN5Print10printFloatEdh+0x1a6>
 1a6:	c7 01       	movw	r24, r14
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	7f 90       	pop	r7
 1be:	6f 90       	pop	r6
 1c0:	5f 90       	pop	r5
 1c2:	4f 90       	pop	r4
 1c4:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZN5Print5printEdi>

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  return n;
}
  16:	80 0f       	add	r24, r16
  18:	91 1f       	adc	r25, r17
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000012d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000017b8  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream9timedReadEv 00000060  00000000  00000000  00002ac4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 00000060  00000000  00000000  00002b24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitE13LookaheadModeb 0000007c  00000000  00000000  00002b84  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  00002c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN6Stream8parseIntE13LookaheadModec 000000f2  00000000  00000000  00002c0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream10parseFloatE13LookaheadModec 0000012c  00000000  00000000  00002cfe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream9readBytesEPcj 0000004c  00000000  00000000  00002e2a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream14readBytesUntilEcPcj 00000068  00000000  00000000  00002e76  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .rodata.str1.1 00000001  00000000  00000000  00002ede  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .text._ZN6Stream10readStringEv 00000034  00000000  00000000  00002edf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream15readStringUntilEc 00000050  00000000  00000000  00002f13  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream9findMultiEPNS_11MultiTargetEi 0000013a  00000000  00000000  00002f63  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9findUntilEPcjS0_j.part.0 0000004a  00000000  00000000  0000309d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream4findEPcj 00000004  00000000  00000000  000030e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream4findEPc 00000014  00000000  00000000  000030eb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6Stream9findUntilEPcjS0_j 00000074  00000000  00000000  000030ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6Stream9findUntilEPcS0_ 00000030  00000000  00000000  00003173  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .comment      00000012  00000000  00000000  000031a3  2**0
                  CONTENTS, READONLY

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   e:	68 87       	std	Y+8, r22	; 0x08
  10:	79 87       	std	Y+9, r23	; 0x09
  12:	8a 87       	std	Y+10, r24	; 0x0a
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  1a:	06 80       	ldd	r0, Z+6	; 0x06
  1c:	f7 81       	ldd	r31, Z+7	; 0x07
  1e:	e0 2d       	mov	r30, r0
  20:	ce 01       	movw	r24, r28
  22:	09 95       	icall
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9timedReadEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
}
  2c:	08 85       	ldd	r16, Y+8	; 0x08
  2e:	19 85       	ldd	r17, Y+9	; 0x09
  30:	2a 85       	ldd	r18, Y+10	; 0x0a
  32:	3b 85       	ldd	r19, Y+11	; 0x0b
  34:	dc 01       	movw	r26, r24
  36:	cb 01       	movw	r24, r22
  38:	80 1b       	sub	r24, r16
  3a:	91 0b       	sbc	r25, r17
  3c:	a2 0b       	sbc	r26, r18
  3e:	b3 0b       	sbc	r27, r19
  40:	0c 81       	ldd	r16, Y+4	; 0x04
  42:	1d 81       	ldd	r17, Y+5	; 0x05
  44:	2e 81       	ldd	r18, Y+6	; 0x06
  46:	3f 81       	ldd	r19, Y+7	; 0x07
  48:	80 17       	cp	r24, r16
  4a:	91 07       	cpc	r25, r17
  4c:	a2 07       	cpc	r26, r18
  4e:	b3 07       	cpc	r27, r19
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream9timedReadEv+0x52>
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	9f ef       	ldi	r25, 0xFF	; 255
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   e:	68 87       	std	Y+8, r22	; 0x08
  10:	79 87       	std	Y+9, r23	; 0x09
  12:	8a 87       	std	Y+10, r24	; 0x0a
  14:	9b 87       	std	Y+11, r25	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  1a:	00 84       	ldd	r0, Z+8	; 0x08
  1c:	f1 85       	ldd	r31, Z+9	; 0x09
  1e:	e0 2d       	mov	r30, r0
  20:	ce 01       	movw	r24, r28
  22:	09 95       	icall
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9timedPeekEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
}
  2c:	08 85       	ldd	r16, Y+8	; 0x08
  2e:	19 85       	ldd	r17, Y+9	; 0x09
  30:	2a 85       	ldd	r18, Y+10	; 0x0a
  32:	3b 85       	ldd	r19, Y+11	; 0x0b
  34:	dc 01       	movw	r26, r24
  36:	cb 01       	movw	r24, r22
  38:	80 1b       	sub	r24, r16
  3a:	91 0b       	sbc	r25, r17
  3c:	a2 0b       	sbc	r26, r18
  3e:	b3 0b       	sbc	r27, r19
  40:	0c 81       	ldd	r16, Y+4	; 0x04
  42:	1d 81       	ldd	r17, Y+5	; 0x05
  44:	2e 81       	ldd	r18, Y+6	; 0x06
  46:	3f 81       	ldd	r19, Y+7	; 0x07
  48:	80 17       	cp	r24, r16
  4a:	91 07       	cpc	r25, r17
  4c:	a2 07       	cpc	r26, r18
  4e:	b3 07       	cpc	r27, r19
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream9timedPeekEv+0x52>
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	9f ef       	ldi	r25, 0xFF	; 255
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitE13LookaheadModeb:

00000000 <_ZN6Stream13peekNextDigitE13LookaheadModeb>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	ec 01       	movw	r28, r24
   c:	8b 01       	movw	r16, r22
   e:	f4 2e       	mov	r15, r20
  10:	ce 01       	movw	r24, r28
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitE13LookaheadModeb>
  16:	9c 01       	movw	r18, r24
  18:	97 fd       	sbrc	r25, 7
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x1c>
  1c:	8d 32       	cpi	r24, 0x2D	; 45
  1e:	91 05       	cpc	r25, r1
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x22>
  22:	c0 97       	sbiw	r24, 0x30	; 48
  24:	0a 97       	sbiw	r24, 0x0a	; 10
  26:	00 f0       	brcs	.+0      	; 0x28 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x28>
  28:	ff 20       	and	r15, r15
}
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x2c>
  2c:	2e 32       	cpi	r18, 0x2E	; 46
  2e:	31 05       	cpc	r19, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x32>
  32:	c9 01       	movw	r24, r18
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x36>
  36:	01 30       	cpi	r16, 0x01	; 1
  38:	11 05       	cpc	r17, r1
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x3c>
  3c:	02 30       	cpi	r16, 0x02	; 2
  3e:	11 05       	cpc	r17, r1
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x42>
  42:	2d 30       	cpi	r18, 0x0D	; 13
  44:	31 05       	cpc	r19, r1
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x48>
  48:	04 f4       	brge	.+0      	; 0x4a <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x4a>
  4a:	29 50       	subi	r18, 0x09	; 9
  4c:	31 09       	sbc	r19, r1
  4e:	22 30       	cpi	r18, 0x02	; 2
  50:	31 05       	cpc	r19, r1
  52:	00 f0       	brcs	.+0      	; 0x54 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x54>
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x56>
  56:	20 32       	cpi	r18, 0x20	; 32
  58:	31 05       	cpc	r19, r1
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x5c>
  5c:	e8 81       	ld	r30, Y
  5e:	f9 81       	ldd	r31, Y+1	; 0x01
  60:	06 80       	ldd	r0, Z+6	; 0x06
  62:	f7 81       	ldd	r31, Z+7	; 0x07
  64:	e0 2d       	mov	r30, r0
  66:	ce 01       	movw	r24, r28
  68:	09 95       	icall
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN6Stream13peekNextDigitE13LookaheadModeb+0x6c>
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	9f ef       	ldi	r25, 0xFF	; 255
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	08 95       	ret

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
   4:	55 83       	std	Z+5, r21	; 0x05
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
   a:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntE13LookaheadModec:

00000000 <_ZN6Stream8parseIntE13LookaheadModec>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	00 d0       	rcall	.+0      	; 0x18 <_ZN6Stream8parseIntE13LookaheadModec+0x18>
  18:	00 d0       	rcall	.+0      	; 0x1a <_ZN6Stream8parseIntE13LookaheadModec+0x1a>
  1a:	cd b7       	in	r28, 0x3d	; 61
  1c:	de b7       	in	r29, 0x3e	; 62
  1e:	8c 01       	movw	r16, r24
  20:	b4 2e       	mov	r11, r20
  22:	40 e0       	ldi	r20, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntE13LookaheadModec>
  28:	fc 01       	movw	r30, r24
}
  2a:	97 fd       	sbrc	r25, 7
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream8parseIntE13LookaheadModec+0x2e>
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	30 e0       	ldi	r19, 0x00	; 0
  32:	a9 01       	movw	r20, r18
  34:	f1 2c       	mov	r15, r1
  36:	cb 2c       	mov	r12, r11
  38:	bb 0c       	add	r11, r11
  3a:	dd 08       	sbc	r13, r13
  3c:	ec 15       	cp	r30, r12
  3e:	fd 05       	cpc	r31, r13
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6Stream8parseIntE13LookaheadModec+0x42>
  42:	ed 32       	cpi	r30, 0x2D	; 45
  44:	f1 05       	cpc	r31, r1
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN6Stream8parseIntE13LookaheadModec+0x48>
  48:	cf 01       	movw	r24, r30
  4a:	c0 97       	sbiw	r24, 0x30	; 48
  4c:	0a 97       	sbiw	r24, 0x0a	; 10
  4e:	00 f4       	brcc	.+0      	; 0x50 <_ZN6Stream8parseIntE13LookaheadModec+0x50>
  50:	aa e0       	ldi	r26, 0x0A	; 10
  52:	b0 e0       	ldi	r27, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntE13LookaheadModec>
  58:	4f 01       	movw	r8, r30
  5a:	ff 0f       	add	r31, r31
  5c:	aa 08       	sbc	r10, r10
  5e:	bb 08       	sbc	r11, r11
  60:	dc 01       	movw	r26, r24
  62:	cb 01       	movw	r24, r22
  64:	88 0d       	add	r24, r8
  66:	99 1d       	adc	r25, r9
  68:	aa 1d       	adc	r26, r10
  6a:	bb 1d       	adc	r27, r11
  6c:	9c 01       	movw	r18, r24
  6e:	ad 01       	movw	r20, r26
  70:	20 53       	subi	r18, 0x30	; 48
  72:	31 09       	sbc	r19, r1
  74:	41 09       	sbc	r20, r1
  76:	51 09       	sbc	r21, r1
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN6Stream8parseIntE13LookaheadModec+0x7a>
  7a:	ff 24       	eor	r15, r15
  7c:	f3 94       	inc	r15
  7e:	d8 01       	movw	r26, r16
  80:	ed 91       	ld	r30, X+
  82:	fc 91       	ld	r31, X
  84:	06 80       	ldd	r0, Z+6	; 0x06
  86:	f7 81       	ldd	r31, Z+7	; 0x07
  88:	e0 2d       	mov	r30, r0
  8a:	c8 01       	movw	r24, r16
  8c:	29 83       	std	Y+1, r18	; 0x01
  8e:	3a 83       	std	Y+2, r19	; 0x02
  90:	4b 83       	std	Y+3, r20	; 0x03
  92:	5c 83       	std	Y+4, r21	; 0x04
  94:	09 95       	icall
  96:	c8 01       	movw	r24, r16
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntE13LookaheadModec>
  9c:	fc 01       	movw	r30, r24
  9e:	c0 97       	sbiw	r24, 0x30	; 48
  a0:	29 81       	ldd	r18, Y+1	; 0x01
  a2:	3a 81       	ldd	r19, Y+2	; 0x02
  a4:	4b 81       	ldd	r20, Y+3	; 0x03
  a6:	5c 81       	ldd	r21, Y+4	; 0x04
  a8:	0a 97       	sbiw	r24, 0x0a	; 10
  aa:	00 f0       	brcs	.+0      	; 0xac <_ZN6Stream8parseIntE13LookaheadModec+0xac>
  ac:	ec 15       	cp	r30, r12
  ae:	fd 05       	cpc	r31, r13
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN6Stream8parseIntE13LookaheadModec+0xb2>
  b2:	ff 20       	and	r15, r15
  b4:	01 f0       	breq	.+0      	; 0xb6 <_ZN6Stream8parseIntE13LookaheadModec+0xb6>
  b6:	66 27       	eor	r22, r22
  b8:	77 27       	eor	r23, r23
  ba:	cb 01       	movw	r24, r22
  bc:	62 1b       	sub	r22, r18
  be:	73 0b       	sbc	r23, r19
  c0:	84 0b       	sbc	r24, r20
  c2:	95 0b       	sbc	r25, r21
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN6Stream8parseIntE13LookaheadModec+0xc6>
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	cb 01       	movw	r24, r22
  cc:	00 c0       	rjmp	.+0      	; 0xce <_ZN6Stream8parseIntE13LookaheadModec+0xce>
  ce:	ca 01       	movw	r24, r20
  d0:	b9 01       	movw	r22, r18
  d2:	0f 90       	pop	r0
  d4:	0f 90       	pop	r0
  d6:	0f 90       	pop	r0
  d8:	0f 90       	pop	r0
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	1f 91       	pop	r17
  e0:	0f 91       	pop	r16
  e2:	ff 90       	pop	r15
  e4:	df 90       	pop	r13
  e6:	cf 90       	pop	r12
  e8:	bf 90       	pop	r11
  ea:	af 90       	pop	r10
  ec:	9f 90       	pop	r9
  ee:	8f 90       	pop	r8
  f0:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatE13LookaheadModec:

00000000 <_ZN6Stream10parseFloatE13LookaheadModec>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	7f 92       	push	r7
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	5c 01       	movw	r10, r24
  1e:	04 2f       	mov	r16, r20
  20:	41 e0       	ldi	r20, 0x01	; 1
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
  26:	fc 01       	movw	r30, r24
  28:	97 fd       	sbrc	r25, 7
}
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream10parseFloatE13LookaheadModec+0x2c>
  2c:	41 2c       	mov	r4, r1
  2e:	51 2c       	mov	r5, r1
  30:	80 e8       	ldi	r24, 0x80	; 128
  32:	68 2e       	mov	r6, r24
  34:	8f e3       	ldi	r24, 0x3F	; 63
  36:	78 2e       	mov	r7, r24
  38:	c1 2c       	mov	r12, r1
  3a:	d1 2c       	mov	r13, r1
  3c:	76 01       	movw	r14, r12
  3e:	c0 e0       	ldi	r28, 0x00	; 0
  40:	d0 e0       	ldi	r29, 0x00	; 0
  42:	00 2e       	mov	r0, r16
  44:	00 0c       	add	r0, r0
  46:	11 0b       	sbc	r17, r17
  48:	e0 17       	cp	r30, r16
  4a:	f1 07       	cpc	r31, r17
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZN6Stream10parseFloatE13LookaheadModec+0x4e>
  4e:	ed 32       	cpi	r30, 0x2D	; 45
  50:	f1 05       	cpc	r31, r1
  52:	01 f0       	breq	.+0      	; 0x54 <_ZN6Stream10parseFloatE13LookaheadModec+0x54>
  54:	ee 32       	cpi	r30, 0x2E	; 46
  56:	f1 05       	cpc	r31, r1
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN6Stream10parseFloatE13LookaheadModec+0x5a>
  5a:	cf 01       	movw	r24, r30
  5c:	c0 97       	sbiw	r24, 0x30	; 48
  5e:	0a 97       	sbiw	r24, 0x0a	; 10
  60:	00 f4       	brcc	.+0      	; 0x62 <_ZN6Stream10parseFloatE13LookaheadModec+0x62>
  62:	aa e0       	ldi	r26, 0x0A	; 10
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	a7 01       	movw	r20, r14
  68:	96 01       	movw	r18, r12
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
  6e:	6f 01       	movw	r12, r30
  70:	ff 0f       	add	r31, r31
  72:	ee 08       	sbc	r14, r14
  74:	ff 08       	sbc	r15, r15
  76:	c6 0e       	add	r12, r22
  78:	d7 1e       	adc	r13, r23
  7a:	e8 1e       	adc	r14, r24
  7c:	f9 1e       	adc	r15, r25
  7e:	80 e3       	ldi	r24, 0x30	; 48
  80:	c8 1a       	sub	r12, r24
  82:	d1 08       	sbc	r13, r1
  84:	e1 08       	sbc	r14, r1
  86:	f1 08       	sbc	r15, r1
  88:	cc 23       	and	r28, r28
  8a:	01 f0       	breq	.+0      	; 0x8c <_ZN6Stream10parseFloatE13LookaheadModec+0x8c>
  8c:	2d ec       	ldi	r18, 0xCD	; 205
  8e:	3c ec       	ldi	r19, 0xCC	; 204
  90:	4c ec       	ldi	r20, 0xCC	; 204
  92:	5d e3       	ldi	r21, 0x3D	; 61
  94:	c3 01       	movw	r24, r6
  96:	b2 01       	movw	r22, r4
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
  9c:	2b 01       	movw	r4, r22
  9e:	3c 01       	movw	r6, r24
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN6Stream10parseFloatE13LookaheadModec+0xa2>
  a2:	d1 e0       	ldi	r29, 0x01	; 1
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN6Stream10parseFloatE13LookaheadModec+0xa6>
  a6:	c1 e0       	ldi	r28, 0x01	; 1
  a8:	d5 01       	movw	r26, r10
  aa:	ed 91       	ld	r30, X+
  ac:	fc 91       	ld	r31, X
  ae:	06 80       	ldd	r0, Z+6	; 0x06
  b0:	f7 81       	ldd	r31, Z+7	; 0x07
  b2:	e0 2d       	mov	r30, r0
  b4:	c5 01       	movw	r24, r10
  b6:	09 95       	icall
  b8:	c5 01       	movw	r24, r10
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
  be:	fc 01       	movw	r30, r24
  c0:	c0 97       	sbiw	r24, 0x30	; 48
  c2:	0a 97       	sbiw	r24, 0x0a	; 10
  c4:	00 f0       	brcs	.+0      	; 0xc6 <_ZN6Stream10parseFloatE13LookaheadModec+0xc6>
  c6:	ee 32       	cpi	r30, 0x2E	; 46
  c8:	f1 05       	cpc	r31, r1
  ca:	01 f4       	brne	.+0      	; 0xcc <_ZN6Stream10parseFloatE13LookaheadModec+0xcc>
  cc:	cc 23       	and	r28, r28
  ce:	01 f4       	brne	.+0      	; 0xd0 <_ZN6Stream10parseFloatE13LookaheadModec+0xd0>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN6Stream10parseFloatE13LookaheadModec+0xd2>
  d2:	e0 17       	cp	r30, r16
  d4:	f1 07       	cpc	r31, r17
  d6:	01 f4       	brne	.+0      	; 0xd8 <_ZN6Stream10parseFloatE13LookaheadModec+0xd8>
  d8:	00 c0       	rjmp	.+0      	; 0xda <_ZN6Stream10parseFloatE13LookaheadModec+0xda>
  da:	c7 01       	movw	r24, r14
  dc:	b6 01       	movw	r22, r12
  de:	dd 23       	and	r29, r29
  e0:	01 f0       	breq	.+0      	; 0xe2 <_ZN6Stream10parseFloatE13LookaheadModec+0xe2>
  e2:	90 95       	com	r25
  e4:	80 95       	com	r24
  e6:	70 95       	com	r23
  e8:	61 95       	neg	r22
  ea:	7f 4f       	sbci	r23, 0xFF	; 255
  ec:	8f 4f       	sbci	r24, 0xFF	; 255
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	cc 23       	and	r28, r28
  f2:	01 f0       	breq	.+0      	; 0xf4 <_ZN6Stream10parseFloatE13LookaheadModec+0xf4>
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
  f8:	a3 01       	movw	r20, r6
  fa:	92 01       	movw	r18, r4
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_ZN6Stream10parseFloatE13LookaheadModec+0x102>
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatE13LookaheadModec>
 106:	00 c0       	rjmp	.+0      	; 0x108 <_ZN6Stream10parseFloatE13LookaheadModec+0x108>
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	cb 01       	movw	r24, r22
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	bf 90       	pop	r11
 120:	af 90       	pop	r10
 122:	7f 90       	pop	r7
 124:	6f 90       	pop	r6
 126:	5f 90       	pop	r5
 128:	4f 90       	pop	r4
 12a:	08 95       	ret

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	ce 15       	cp	r28, r14
  1c:	df 05       	cpc	r29, r15
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6Stream9readBytesEPcj+0x20>
  20:	c6 01       	movw	r24, r12
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
  26:	97 ff       	sbrs	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream9readBytesEPcj+0x2a>
}
  2a:	7e 01       	movw	r14, r28
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream9readBytesEPcj+0x2e>
  2e:	f8 01       	movw	r30, r16
  30:	81 93       	st	Z+, r24
  32:	8f 01       	movw	r16, r30
  34:	21 96       	adiw	r28, 0x01	; 1
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6Stream9readBytesEPcj+0x38>
  38:	c7 01       	movw	r24, r14
  3a:	df 91       	pop	r29
  3c:	cf 91       	pop	r28
  3e:	1f 91       	pop	r17
  40:	0f 91       	pop	r16
  42:	ff 90       	pop	r15
  44:	ef 90       	pop	r14
  46:	df 90       	pop	r13
  48:	cf 90       	pop	r12
  4a:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	21 15       	cp	r18, r1
  16:	31 05       	cpc	r19, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6Stream14readBytesUntilEcPcj+0x1a>
  1a:	79 01       	movw	r14, r18
  1c:	5c 01       	movw	r10, r24
  1e:	6a 01       	movw	r12, r20
  20:	c0 e0       	ldi	r28, 0x00	; 0
  22:	d0 e0       	ldi	r29, 0x00	; 0
  24:	06 2f       	mov	r16, r22
  26:	66 0f       	add	r22, r22
  28:	11 0b       	sbc	r17, r17
}
  2a:	c5 01       	movw	r24, r10
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
  30:	97 ff       	sbrs	r25, 7
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream14readBytesUntilEcPcj+0x34>
  34:	ce 01       	movw	r24, r28
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6Stream14readBytesUntilEcPcj+0x38>
  38:	80 17       	cp	r24, r16
  3a:	91 07       	cpc	r25, r17
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream14readBytesUntilEcPcj+0x3e>
  3e:	f6 01       	movw	r30, r12
  40:	81 93       	st	Z+, r24
  42:	6f 01       	movw	r12, r30
  44:	21 96       	adiw	r28, 0x01	; 1
  46:	ce 15       	cp	r28, r14
  48:	df 05       	cpc	r29, r15
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6Stream14readBytesUntilEcPcj+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6Stream14readBytesUntilEcPcj+0x4e>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	df 90       	pop	r13
  60:	cf 90       	pop	r12
  62:	bf 90       	pop	r11
  64:	af 90       	pop	r10
  66:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

00000000 <_ZN6Stream10readStringEv>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	60 e0       	ldi	r22, 0x00	; 0
   e:	70 e0       	ldi	r23, 0x00	; 0
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  14:	c8 01       	movw	r24, r16
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  1a:	97 fd       	sbrc	r25, 7
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN6Stream10readStringEv+0x1e>
  1e:	68 2f       	mov	r22, r24
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream10readStringEv+0x28>
  28:	ce 01       	movw	r24, r28
}
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

00000000 <_ZN6Stream15readStringUntilEc>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	04 2f       	mov	r16, r20
  12:	60 e0       	ldi	r22, 0x00	; 0
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  1a:	c7 01       	movw	r24, r14
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  20:	00 2e       	mov	r0, r16
  22:	00 0c       	add	r0, r0
  24:	11 0b       	sbc	r17, r17
  26:	97 fd       	sbrc	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream15readStringUntilEc+0x2a>
}
  2a:	80 17       	cp	r24, r16
  2c:	91 07       	cpc	r25, r17
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6Stream15readStringUntilEc+0x30>
  30:	68 2f       	mov	r22, r24
  32:	ce 01       	movw	r24, r28
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  38:	c7 01       	movw	r24, r14
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6Stream15readStringUntilEc+0x40>
  40:	ce 01       	movw	r24, r28
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	08 95       	ret

Disassembly of section .text._ZN6Stream9findMultiEPNS_11MultiTargetEi:

00000000 <_ZN6Stream9findMultiEPNS_11MultiTargetEi>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  1e:	df 93       	push	r29
  20:	8c 01       	movw	r16, r24
  22:	eb 01       	movw	r28, r22
  24:	86 e0       	ldi	r24, 0x06	; 6
  26:	84 9f       	mul	r24, r20
  28:	40 01       	movw	r8, r0
}
  2a:	85 9f       	mul	r24, r21
  2c:	90 0c       	add	r9, r0
  2e:	11 24       	eor	r1, r1
  30:	86 0e       	add	r8, r22
  32:	97 1e       	adc	r9, r23
  34:	fb 01       	movw	r30, r22
  36:	e8 15       	cp	r30, r8
  38:	f9 05       	cpc	r31, r9
  3a:	00 f4       	brcc	.+0      	; 0x3c <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x3c>
  3c:	82 81       	ldd	r24, Z+2	; 0x02
  3e:	93 81       	ldd	r25, Z+3	; 0x03
  40:	89 2b       	or	r24, r25
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x44>
  44:	36 96       	adiw	r30, 0x06	; 6
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x48>
  48:	60 81       	ld	r22, Z
  4a:	71 81       	ldd	r23, Z+1	; 0x01
  4c:	44 81       	ldd	r20, Z+4	; 0x04
  4e:	55 81       	ldd	r21, Z+5	; 0x05
  50:	db 01       	movw	r26, r22
  52:	a4 0f       	add	r26, r20
  54:	b5 1f       	adc	r27, r21
  56:	2c 91       	ld	r18, X
  58:	02 2e       	mov	r0, r18
  5a:	00 0c       	add	r0, r0
  5c:	33 0b       	sbc	r19, r19
  5e:	82 17       	cp	r24, r18
  60:	93 07       	cpc	r25, r19
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x64>
  64:	4f 5f       	subi	r20, 0xFF	; 255
  66:	5f 4f       	sbci	r21, 0xFF	; 255
  68:	55 83       	std	Z+5, r21	; 0x05
  6a:	44 83       	std	Z+4, r20	; 0x04
  6c:	22 81       	ldd	r18, Z+2	; 0x02
  6e:	33 81       	ldd	r19, Z+3	; 0x03
  70:	42 17       	cp	r20, r18
  72:	53 07       	cpc	r21, r19
  74:	01 f0       	breq	.+0      	; 0x76 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x76>
  76:	36 96       	adiw	r30, 0x06	; 6
  78:	e8 15       	cp	r30, r8
  7a:	f9 05       	cpc	r31, r9
  7c:	00 f0       	brcs	.+0      	; 0x7e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x7e>
  7e:	c8 01       	movw	r24, r16
  80:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findMultiEPNS_11MultiTargetEi>
  84:	97 fd       	sbrc	r25, 7
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x88>
  88:	fe 01       	movw	r30, r28
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x8c>
  8c:	ec 1b       	sub	r30, r28
  8e:	fd 0b       	sbc	r31, r29
  90:	f5 95       	asr	r31
  92:	e7 95       	ror	r30
  94:	2b ea       	ldi	r18, 0xAB	; 171
  96:	3a ea       	ldi	r19, 0xAA	; 170
  98:	e2 9f       	mul	r30, r18
  9a:	c0 01       	movw	r24, r0
  9c:	e3 9f       	mul	r30, r19
  9e:	90 0d       	add	r25, r0
  a0:	f2 9f       	mul	r31, r18
  a2:	90 0d       	add	r25, r0
  a4:	11 24       	eor	r1, r1
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xa8>
  a8:	41 15       	cp	r20, r1
  aa:	51 05       	cpc	r21, r1
  ac:	01 f0       	breq	.+0      	; 0xae <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xae>
  ae:	c4 80       	ldd	r12, Z+4	; 0x04
  b0:	d5 80       	ldd	r13, Z+5	; 0x05
  b2:	96 01       	movw	r18, r12
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	31 09       	sbc	r19, r1
  b8:	35 83       	std	Z+5, r19	; 0x05
  ba:	24 83       	std	Z+4, r18	; 0x04
  bc:	db 01       	movw	r26, r22
  be:	a2 0f       	add	r26, r18
  c0:	b3 1f       	adc	r27, r19
  c2:	ac 91       	ld	r26, X
  c4:	0a 2e       	mov	r0, r26
  c6:	00 0c       	add	r0, r0
  c8:	bb 0b       	sbc	r27, r27
  ca:	8a 17       	cp	r24, r26
  cc:	9b 07       	cpc	r25, r27
  ce:	01 f4       	brne	.+0      	; 0xd0 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xd0>
  d0:	21 15       	cp	r18, r1
  d2:	31 05       	cpc	r19, r1
  d4:	01 f0       	breq	.+0      	; 0xd6 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xd6>
  d6:	5b 01       	movw	r10, r22
  d8:	7a 01       	movw	r14, r20
  da:	e2 1a       	sub	r14, r18
  dc:	f3 0a       	sbc	r15, r19
  de:	e6 0e       	add	r14, r22
  e0:	f7 1e       	adc	r15, r23
  e2:	41 2c       	mov	r4, r1
  e4:	51 2c       	mov	r5, r1
  e6:	d5 01       	movw	r26, r10
  e8:	6d 90       	ld	r6, X+
  ea:	5d 01       	movw	r10, r26
  ec:	d7 01       	movw	r26, r14
  ee:	7d 90       	ld	r7, X+
  f0:	7d 01       	movw	r14, r26
  f2:	67 10       	cpse	r6, r7
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0xf6>
  f6:	bf ef       	ldi	r27, 0xFF	; 255
  f8:	4b 1a       	sub	r4, r27
  fa:	5b 0a       	sbc	r5, r27
  fc:	42 16       	cp	r4, r18
  fe:	53 06       	cpc	r5, r19
 100:	00 f0       	brcs	.+0      	; 0x102 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x102>
 102:	42 16       	cp	r4, r18
 104:	53 06       	cpc	r5, r19
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x108>
 108:	d5 82       	std	Z+5, r13	; 0x05
 10a:	c4 82       	std	Z+4, r12	; 0x04
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x10e>
 10e:	23 2b       	or	r18, r19
 110:	01 f4       	brne	.+0      	; 0x112 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x112>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_ZN6Stream9findMultiEPNS_11MultiTargetEi+0x114>
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	9f ef       	ldi	r25, 0xFF	; 255
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	cf 90       	pop	r12
 128:	bf 90       	pop	r11
 12a:	af 90       	pop	r10
 12c:	9f 90       	pop	r9
 12e:	8f 90       	pop	r8
 130:	7f 90       	pop	r7
 132:	6f 90       	pop	r6
 134:	5f 90       	pop	r5
 136:	4f 90       	pop	r4
 138:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j.part.0:

00000000 <_ZN6Stream9findUntilEPcjS0_j.part.0>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x6>
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	00 d0       	rcall	.+0      	; 0x8 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x8>
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6Stream9findUntilEPcjS0_j.part.0+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	fe 01       	movw	r30, r28
  10:	31 96       	adiw	r30, 0x01	; 1
  12:	26 e0       	ldi	r18, 0x06	; 6
  14:	df 01       	movw	r26, r30
  16:	1d 92       	st	X+, r1
  18:	2a 95       	dec	r18
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6Stream9findUntilEPcjS0_j.part.0+0x1c>
  1c:	7a 83       	std	Y+2, r23	; 0x02
  1e:	69 83       	std	Y+1, r22	; 0x01
  20:	5c 83       	std	Y+4, r21	; 0x04
  22:	4b 83       	std	Y+3, r20	; 0x03
  24:	41 e0       	ldi	r20, 0x01	; 1
  26:	50 e0       	ldi	r21, 0x00	; 0
  28:	bf 01       	movw	r22, r30
}
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j.part.0>
  2e:	21 e0       	ldi	r18, 0x01	; 1
  30:	89 2b       	or	r24, r25
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN6Stream9findUntilEPcjS0_j.part.0+0x34>
  34:	20 e0       	ldi	r18, 0x00	; 0
  36:	82 2f       	mov	r24, r18
  38:	26 96       	adiw	r28, 0x06	; 6
  3a:	0f b6       	in	r0, 0x3f	; 63
  3c:	f8 94       	cli
  3e:	de bf       	out	0x3e, r29	; 62
  40:	0f be       	out	0x3f, r0	; 63
  42:	cd bf       	out	0x3d, r28	; 61
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6Stream4findEPcj>

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
   0:	fb 01       	movw	r30, r22
   2:	01 90       	ld	r0, Z+
   4:	00 20       	and	r0, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN6Stream4findEPc+0x8>
   8:	31 97       	sbiw	r30, 0x01	; 1
   a:	af 01       	movw	r20, r30
   c:	46 1b       	sub	r20, r22
   e:	57 0b       	sbc	r21, r23
  10:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6Stream4findEPc>

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	2c 97       	sbiw	r28, 0x0c	; 12
  10:	0f b6       	in	r0, 0x3f	; 63
  12:	f8 94       	cli
  14:	de bf       	out	0x3e, r29	; 62
  16:	0f be       	out	0x3f, r0	; 63
  18:	cd bf       	out	0x3d, r28	; 61
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcjS0_j+0x20>
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  24:	28 2f       	mov	r18, r24
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9findUntilEPcjS0_j+0x28>
  28:	fe 01       	movw	r30, r28
}
  2a:	31 96       	adiw	r30, 0x01	; 1
  2c:	ac e0       	ldi	r26, 0x0C	; 12
  2e:	fa 2e       	mov	r15, r26
  30:	df 01       	movw	r26, r30
  32:	1d 92       	st	X+, r1
  34:	fa 94       	dec	r15
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6Stream9findUntilEPcjS0_j+0x38>
  38:	7a 83       	std	Y+2, r23	; 0x02
  3a:	69 83       	std	Y+1, r22	; 0x01
  3c:	5c 83       	std	Y+4, r21	; 0x04
  3e:	4b 83       	std	Y+3, r20	; 0x03
  40:	38 87       	std	Y+8, r19	; 0x08
  42:	2f 83       	std	Y+7, r18	; 0x07
  44:	1a 87       	std	Y+10, r17	; 0x0a
  46:	09 87       	std	Y+9, r16	; 0x09
  48:	42 e0       	ldi	r20, 0x02	; 2
  4a:	50 e0       	ldi	r21, 0x00	; 0
  4c:	bf 01       	movw	r22, r30
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  52:	21 e0       	ldi	r18, 0x01	; 1
  54:	89 2b       	or	r24, r25
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN6Stream9findUntilEPcjS0_j+0x58>
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	82 2f       	mov	r24, r18
  5c:	2c 96       	adiw	r28, 0x0c	; 12
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
  68:	df 91       	pop	r29
  6a:	cf 91       	pop	r28
  6c:	1f 91       	pop	r17
  6e:	0f 91       	pop	r16
  70:	ff 90       	pop	r15
  72:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	9a 01       	movw	r18, r20
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	fa 01       	movw	r30, r20
   8:	01 90       	ld	r0, Z+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6Stream9findUntilEPcS0_+0xe>
   e:	31 97       	sbiw	r30, 0x01	; 1
  10:	8f 01       	movw	r16, r30
  12:	04 1b       	sub	r16, r20
  14:	15 0b       	sbc	r17, r21
  16:	fb 01       	movw	r30, r22
  18:	01 90       	ld	r0, Z+
  1a:	00 20       	and	r0, r0
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN6Stream9findUntilEPcS0_+0x1e>
  1e:	31 97       	sbiw	r30, 0x01	; 1
  20:	af 01       	movw	r20, r30
  22:	46 1b       	sub	r20, r22
  24:	57 0b       	sbc	r21, r23
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
}
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000013de  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z4tonehjm 000004d0  00000000  00000000  0000223a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000040  00000000  00000000  0000270a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002c  00000000  00000000  0000274a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_7 000000b8  00000000  00000000  00002776  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data._ZL21tone_pin_to_timer_PGM 00000001  00000000  00000000  0000282e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .data._ZL9tone_pins 00000001  00000000  00000000  0000282f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss.timer2_pin_mask 00000001  00000000  00000000  00002830  2**0
                  ALLOC
 12 .bss.timer2_pin_port 00000002  00000000  00000000  00002830  2**0
                  ALLOC
 13 .bss.timer2_toggle_count 00000004  00000000  00000000  00002830  2**0
                  ALLOC
 14 .bss.timer1_pin_mask 00000001  00000000  00000000  00002830  2**0
                  ALLOC
 15 .bss.timer1_pin_port 00000002  00000000  00000000  00002830  2**0
                  ALLOC
 16 .bss.timer1_toggle_count 00000004  00000000  00000000  00002830  2**0
                  ALLOC
 17 .bss.timer0_pin_mask 00000001  00000000  00000000  00002830  2**0
                  ALLOC
 18 .bss.timer0_pin_port 00000002  00000000  00000000  00002830  2**0
                  ALLOC
 19 .bss.timer0_toggle_count 00000004  00000000  00000000  00002830  2**0
                  ALLOC
 20 .comment      00000012  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
   0:	3f 92       	push	r3
   2:	4f 92       	push	r4
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	cf 93       	push	r28
  20:	df 93       	push	r29
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_Z4tonehjm+0x26>
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  2a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2e:	98 17       	cp	r25, r24
  30:	01 f0       	breq	.+0      	; 0x32 <_Z4tonehjm+0x32>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  32:	9f 3f       	cpi	r25, 0xFF	; 255
  34:	01 f0       	breq	.+0      	; 0x36 <_Z4tonehjm+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_Z4tonehjm+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <_Z4tonehjm+0x3a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3a:	e0 e0       	ldi	r30, 0x00	; 0
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	34 90       	lpm	r3, Z
  40:	00 c0       	rjmp	.+0      	; 0x42 <_Z4tonehjm+0x42>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
  42:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  46:	e0 e0       	ldi	r30, 0x00	; 0
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	e4 91       	lpm	r30, Z
      break;
    }
  }
  
  if (_timer != -1)
  4c:	ef 3f       	cpi	r30, 0xFF	; 255
  4e:	01 f4       	brne	.+0      	; 0x50 <_Z4tonehjm+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_Z4tonehjm+0x52>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  52:	e1 30       	cpi	r30, 0x01	; 1
  54:	01 f0       	breq	.+0      	; 0x56 <_Z4tonehjm+0x56>
  56:	e2 30       	cpi	r30, 0x02	; 2
  58:	01 f4       	brne	.+0      	; 0x5a <_Z4tonehjm+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	e1 11       	cpse	r30, r1
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_Z4tonehjm+0x60>
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  60:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
  62:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
  64:	94 b5       	in	r25, 0x24	; 36
  66:	92 60       	ori	r25, 0x02	; 2
  68:	94 bd       	out	0x24, r25	; 36
        bitWrite(TCCR0B, CS00, 1);
  6a:	95 b5       	in	r25, 0x25	; 37
  6c:	91 60       	ori	r25, 0x01	; 1
  6e:	95 bd       	out	0x25, r25	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  70:	a8 2f       	mov	r26, r24
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	fd 01       	movw	r30, r26
  76:	e0 50       	subi	r30, 0x00	; 0
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	e4 91       	lpm	r30, Z
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	ee 0f       	add	r30, r30
  80:	ff 1f       	adc	r31, r31
  82:	e0 50       	subi	r30, 0x00	; 0
  84:	f0 40       	sbci	r31, 0x00	; 0
  86:	05 91       	lpm	r16, Z+
  88:	14 91       	lpm	r17, Z
  8a:	10 93 00 00 	sts	0x0000, r17	; 0x800000 <__SREG__+0x7fffc1>
  8e:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__SREG__+0x7fffc1>
        timer0_pin_mask = digitalPinToBitMask(_pin);
  92:	fd 01       	movw	r30, r26
  94:	e0 50       	subi	r30, 0x00	; 0
  96:	f0 40       	sbci	r31, 0x00	; 0
  98:	e4 91       	lpm	r30, Z
  9a:	e0 93 00 00 	sts	0x0000, r30	; 0x800000 <__SREG__+0x7fffc1>
  9e:	31 2c       	mov	r3, r1
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_Z4tonehjm+0xa2>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
  a2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__SREG__+0x800041>
        TCCR1B = 0;
  a6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__SREG__+0x800042>
        bitWrite(TCCR1B, WGM12, 1);
  aa:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__SREG__+0x800042>
  ae:	98 60       	ori	r25, 0x08	; 8
  b0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__SREG__+0x800042>
        bitWrite(TCCR1B, CS10, 1);
  b4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__SREG__+0x800042>
  b8:	91 60       	ori	r25, 0x01	; 1
  ba:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__SREG__+0x800042>
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
  be:	a8 2f       	mov	r26, r24
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	fd 01       	movw	r30, r26
  c4:	e0 50       	subi	r30, 0x00	; 0
  c6:	f0 40       	sbci	r31, 0x00	; 0
  c8:	e4 91       	lpm	r30, Z
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	f0 40       	sbci	r31, 0x00	; 0
  d4:	05 91       	lpm	r16, Z+
  d6:	14 91       	lpm	r17, Z
  d8:	10 93 00 00 	sts	0x0000, r17	; 0x800000 <__SREG__+0x7fffc1>
  dc:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__SREG__+0x7fffc1>
        timer1_pin_mask = digitalPinToBitMask(_pin);
  e0:	fd 01       	movw	r30, r26
  e2:	e0 50       	subi	r30, 0x00	; 0
  e4:	f0 40       	sbci	r31, 0x00	; 0
  e6:	e4 91       	lpm	r30, Z
  e8:	e0 93 00 00 	sts	0x0000, r30	; 0x800000 <__SREG__+0x7fffc1>
  ec:	33 24       	eor	r3, r3
  ee:	33 94       	inc	r3
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_Z4tonehjm+0xf2>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
  f2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__SREG__+0x800071>
        TCCR2B = 0;
  f6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__SREG__+0x800072>
        bitWrite(TCCR2A, WGM21, 1);
  fa:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__SREG__+0x800071>
  fe:	92 60       	ori	r25, 0x02	; 2
 100:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__SREG__+0x800071>
        bitWrite(TCCR2B, CS20, 1);
 104:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__SREG__+0x800072>
 108:	91 60       	ori	r25, 0x01	; 1
 10a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__SREG__+0x800072>
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 10e:	a8 2f       	mov	r26, r24
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	fd 01       	movw	r30, r26
 114:	e0 50       	subi	r30, 0x00	; 0
 116:	f0 40       	sbci	r31, 0x00	; 0
 118:	e4 91       	lpm	r30, Z
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	ee 0f       	add	r30, r30
 11e:	ff 1f       	adc	r31, r31
 120:	e0 50       	subi	r30, 0x00	; 0
 122:	f0 40       	sbci	r31, 0x00	; 0
 124:	05 91       	lpm	r16, Z+
 126:	14 91       	lpm	r17, Z
 128:	10 93 00 00 	sts	0x0000, r17	; 0x800000 <__SREG__+0x7fffc1>
 12c:	00 93 00 00 	sts	0x0000, r16	; 0x800000 <__SREG__+0x7fffc1>
        timer2_pin_mask = digitalPinToBitMask(_pin);
 130:	fd 01       	movw	r30, r26
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	f0 40       	sbci	r31, 0x00	; 0
 136:	e4 91       	lpm	r30, Z
 138:	e0 93 00 00 	sts	0x0000, r30	; 0x800000 <__SREG__+0x7fffc1>
 13c:	02 e0       	ldi	r16, 0x02	; 2
 13e:	30 2e       	mov	r3, r16
 140:	00 c0       	rjmp	.+0      	; 0x142 <_Z4tonehjm+0x142>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
 142:	3e 2e       	mov	r3, r30
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
 144:	37 fc       	sbrc	r3, 7
 146:	00 c0       	rjmp	.+0      	; 0x148 <_Z4tonehjm+0x148>
 148:	29 01       	movw	r4, r18
 14a:	3a 01       	movw	r6, r20
 14c:	8b 01       	movw	r16, r22
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 154:	48 01       	movw	r8, r16
 156:	a1 2c       	mov	r10, r1
 158:	b1 2c       	mov	r11, r1
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 15a:	83 2d       	mov	r24, r3
 15c:	8d 7f       	andi	r24, 0xFD	; 253
 15e:	01 f0       	breq	.+0      	; 0x160 <_Z4tonehjm+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z4tonehjm+0x162>
    {
      ocr = F_CPU / frequency / 2 - 1;
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	72 e1       	ldi	r23, 0x12	; 18
 166:	8a e7       	ldi	r24, 0x7A	; 122
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a5 01       	movw	r20, r10
 16c:	94 01       	movw	r18, r8
 16e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 172:	29 83       	std	Y+1, r18	; 0x01
 174:	3a 83       	std	Y+2, r19	; 0x02
 176:	4b 83       	std	Y+3, r20	; 0x03
 178:	5c 83       	std	Y+4, r21	; 0x04
 17a:	69 01       	movw	r12, r18
 17c:	7a 01       	movw	r14, r20
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	c2 1a       	sub	r12, r18
 182:	d1 08       	sbc	r13, r1
 184:	e1 08       	sbc	r14, r1
 186:	f1 08       	sbc	r15, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	c8 16       	cp	r12, r24
 18c:	d1 04       	cpc	r13, r1
 18e:	e1 04       	cpc	r14, r1
 190:	f1 04       	cpc	r15, r1
 192:	01 f0       	breq	.+0      	; 0x194 <_Z4tonehjm+0x194>
 194:	00 f4       	brcc	.+0      	; 0x196 <_Z4tonehjm+0x196>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_Z4tonehjm+0x198>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 198:	60 e4       	ldi	r22, 0x40	; 64
 19a:	72 e4       	ldi	r23, 0x42	; 66
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	a5 01       	movw	r20, r10
 1a2:	94 01       	movw	r18, r8
 1a4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1a8:	69 01       	movw	r12, r18
 1aa:	7a 01       	movw	r14, r20
 1ac:	e1 e0       	ldi	r30, 0x01	; 1
 1ae:	ce 1a       	sub	r12, r30
 1b0:	d1 08       	sbc	r13, r1
 1b2:	e1 08       	sbc	r14, r1
 1b4:	f1 08       	sbc	r15, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
 1b6:	f2 e0       	ldi	r31, 0x02	; 2
 1b8:	3f 12       	cpse	r3, r31
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_Z4tonehjm+0x1bc>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	c2 16       	cp	r12, r18
 1c0:	d1 04       	cpc	r13, r1
 1c2:	e1 04       	cpc	r14, r1
 1c4:	f1 04       	cpc	r15, r1
 1c6:	01 f0       	breq	.+0      	; 0x1c8 <_Z4tonehjm+0x1c8>
 1c8:	00 f4       	brcc	.+0      	; 0x1ca <_Z4tonehjm+0x1ca>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_Z4tonehjm+0x1cc>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 1cc:	60 e9       	ldi	r22, 0x90	; 144
 1ce:	70 ed       	ldi	r23, 0xD0	; 208
 1d0:	83 e0       	ldi	r24, 0x03	; 3
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	a5 01       	movw	r20, r10
 1d6:	94 01       	movw	r18, r8
 1d8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 1dc:	69 01       	movw	r12, r18
 1de:	7a 01       	movw	r14, r20
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	c8 1a       	sub	r12, r24
 1e4:	d1 08       	sbc	r13, r1
 1e6:	e1 08       	sbc	r14, r1
 1e8:	f1 08       	sbc	r15, r1
          prescalarbits = 0b011;
        }

        if (ocr > 255)
 1ea:	ef ef       	ldi	r30, 0xFF	; 255
 1ec:	ce 16       	cp	r12, r30
 1ee:	d1 04       	cpc	r13, r1
 1f0:	e1 04       	cpc	r14, r1
 1f2:	f1 04       	cpc	r15, r1
 1f4:	01 f0       	breq	.+0      	; 0x1f6 <_Z4tonehjm+0x1f6>
 1f6:	00 f4       	brcc	.+0      	; 0x1f8 <_Z4tonehjm+0x1f8>
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
          prescalarbits = 0b011;
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_Z4tonehjm+0x1fc>
        }

        if (ocr > 255)
 1fc:	ff ef       	ldi	r31, 0xFF	; 255
 1fe:	cf 16       	cp	r12, r31
 200:	d1 04       	cpc	r13, r1
 202:	e1 04       	cpc	r14, r1
 204:	f1 04       	cpc	r15, r1
 206:	01 f0       	breq	.+0      	; 0x208 <_Z4tonehjm+0x208>
 208:	00 f0       	brcs	.+0      	; 0x20a <_Z4tonehjm+0x20a>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 20a:	68 e4       	ldi	r22, 0x48	; 72
 20c:	78 ee       	ldi	r23, 0xE8	; 232
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	a5 01       	movw	r20, r10
 214:	94 01       	movw	r18, r8
 216:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 21a:	69 01       	movw	r12, r18
 21c:	7a 01       	movw	r14, r20
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	c8 1a       	sub	r12, r24
 222:	d1 08       	sbc	r13, r1
 224:	e1 08       	sbc	r14, r1
 226:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 228:	33 20       	and	r3, r3
 22a:	01 f4       	brne	.+0      	; 0x22c <_Z4tonehjm+0x22c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <_Z4tonehjm+0x22e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <_Z4tonehjm+0x230>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
    {
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	00 c0       	rjmp	.+0      	; 0x234 <_Z4tonehjm+0x234>
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
 234:	82 e0       	ldi	r24, 0x02	; 2
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 236:	33 20       	and	r3, r3
 238:	01 f0       	breq	.+0      	; 0x23a <_Z4tonehjm+0x23a>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <_Z4tonehjm+0x23c>
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	9a 81       	ldd	r25, Y+2	; 0x02
 240:	ab 81       	ldd	r26, Y+3	; 0x03
 242:	bc 81       	ldd	r27, Y+4	; 0x04
 244:	2a e0       	ldi	r18, 0x0A	; 10
 246:	b6 95       	lsr	r27
 248:	a7 95       	ror	r26
 24a:	97 95       	ror	r25
 24c:	87 95       	ror	r24
 24e:	2a 95       	dec	r18
 250:	01 f4       	brne	.+0      	; 0x252 <_Z4tonehjm+0x252>
 252:	6c 01       	movw	r12, r24
 254:	7d 01       	movw	r14, r26
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	c2 1a       	sub	r12, r18
 25a:	d1 08       	sbc	r13, r1
 25c:	e1 08       	sbc	r14, r1
 25e:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 260:	85 e0       	ldi	r24, 0x05	; 5
      }

#if defined(TCCR0B)
      if (_timer == 0)
      {
        TCCR0B = (TCCR0B & 0b11111000) | prescalarbits;
 262:	95 b5       	in	r25, 0x25	; 37
 264:	98 7f       	andi	r25, 0xF8	; 248
 266:	89 2b       	or	r24, r25
 268:	85 bd       	out	0x25, r24	; 37
 26a:	00 c0       	rjmp	.+0      	; 0x26c <_Z4tonehjm+0x26c>
          prescalarbits = 0b011;
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 26c:	68 e4       	ldi	r22, 0x48	; 72
 26e:	78 ee       	ldi	r23, 0xE8	; 232
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	a5 01       	movw	r20, r10
 276:	94 01       	movw	r18, r8
 278:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27c:	69 01       	movw	r12, r18
 27e:	7a 01       	movw	r14, r20
 280:	f1 e0       	ldi	r31, 0x01	; 1
 282:	cf 1a       	sub	r12, r31
 284:	d1 08       	sbc	r13, r1
 286:	e1 08       	sbc	r14, r1
 288:	f1 08       	sbc	r15, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	c2 16       	cp	r12, r18
 28e:	d1 04       	cpc	r13, r1
 290:	e1 04       	cpc	r14, r1
 292:	f1 04       	cpc	r15, r1
 294:	01 f0       	breq	.+0      	; 0x296 <_Z4tonehjm+0x296>
 296:	00 f4       	brcc	.+0      	; 0x298 <_Z4tonehjm+0x298>
 298:	00 c0       	rjmp	.+0      	; 0x29a <_Z4tonehjm+0x29a>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 29a:	64 e2       	ldi	r22, 0x24	; 36
 29c:	74 ef       	ldi	r23, 0xF4	; 244
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	a5 01       	movw	r20, r10
 2a4:	94 01       	movw	r18, r8
 2a6:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2aa:	69 01       	movw	r12, r18
 2ac:	7a 01       	movw	r14, r20
 2ae:	e1 e0       	ldi	r30, 0x01	; 1
 2b0:	ce 1a       	sub	r12, r30
 2b2:	d1 08       	sbc	r13, r1
 2b4:	e1 08       	sbc	r14, r1
 2b6:	f1 08       	sbc	r15, r1
            prescalarbits = 0b101;
          }

          if (ocr > 255)
 2b8:	ff ef       	ldi	r31, 0xFF	; 255
 2ba:	cf 16       	cp	r12, r31
 2bc:	d1 04       	cpc	r13, r1
 2be:	e1 04       	cpc	r14, r1
 2c0:	f1 04       	cpc	r15, r1
 2c2:	01 f0       	breq	.+0      	; 0x2c4 <_Z4tonehjm+0x2c4>
 2c4:	00 f0       	brcs	.+0      	; 0x2c6 <_Z4tonehjm+0x2c6>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <_Z4tonehjm+0x2c8>
          prescalarbits = _timer == 0 ? 0b011 : 0b100;

          if (_timer == 2 && ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
 2c8:	85 e0       	ldi	r24, 0x05	; 5
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = (TCCR2B & 0b11111000) | prescalarbits;
 2ca:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <__SREG__+0x800072>
 2ce:	98 7f       	andi	r25, 0xF8	; 248
 2d0:	89 2b       	or	r24, r25
 2d2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__SREG__+0x800072>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <_Z4tonehjm+0x2d8>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	72 e1       	ldi	r23, 0x12	; 18
 2dc:	8a e7       	ldi	r24, 0x7A	; 122
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	a5 01       	movw	r20, r10
 2e2:	94 01       	movw	r18, r8
 2e4:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2e8:	69 01       	movw	r12, r18
 2ea:	7a 01       	movw	r14, r20
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	c8 1a       	sub	r12, r24
 2f0:	d1 08       	sbc	r13, r1
 2f2:	e1 08       	sbc	r14, r1
 2f4:	f1 08       	sbc	r15, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
 2f6:	c1 14       	cp	r12, r1
 2f8:	d1 04       	cpc	r13, r1
 2fa:	e1 e0       	ldi	r30, 0x01	; 1
 2fc:	ee 06       	cpc	r14, r30
 2fe:	f1 04       	cpc	r15, r1
 300:	00 f0       	brcs	.+0      	; 0x302 <_Z4tonehjm+0x302>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 302:	68 e4       	ldi	r22, 0x48	; 72
 304:	78 ee       	ldi	r23, 0xE8	; 232
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	a5 01       	movw	r20, r10
 30c:	94 01       	movw	r18, r8
 30e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 312:	69 01       	movw	r12, r18
 314:	7a 01       	movw	r14, r20
 316:	f1 e0       	ldi	r31, 0x01	; 1
 318:	cf 1a       	sub	r12, r31
 31a:	d1 08       	sbc	r13, r1
 31c:	e1 08       	sbc	r14, r1
 31e:	f1 08       	sbc	r15, r1
        prescalarbits = 0b011;
 320:	93 e0       	ldi	r25, 0x03	; 3
 322:	00 c0       	rjmp	.+0      	; 0x324 <_Z4tonehjm+0x324>
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;

      prescalarbits = 0b001;
 324:	91 e0       	ldi	r25, 0x01	; 1
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
        prescalarbits = 0b011;
      }

      if (_timer == 1)
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	32 12       	cpse	r3, r18
 32a:	00 c0       	rjmp	.+0      	; 0x32c <_Z4tonehjm+0x32c>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 32c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__SREG__+0x800042>
 330:	88 7f       	andi	r24, 0xF8	; 248
 332:	89 2b       	or	r24, r25
 334:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__SREG__+0x800042>

    }
    

    // Calculate the toggle count
    if (duration > 0)
 338:	41 14       	cp	r4, r1
 33a:	51 04       	cpc	r5, r1
 33c:	61 04       	cpc	r6, r1
 33e:	71 04       	cpc	r7, r1
 340:	01 f4       	brne	.+0      	; 0x342 <_Z4tonehjm+0x342>
    {
      toggle_count = 2 * frequency * duration / 1000;
    }
    else
    {
      toggle_count = -1;
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	3f ef       	ldi	r19, 0xFF	; 255
 346:	a9 01       	movw	r20, r18
 348:	00 c0       	rjmp	.+0      	; 0x34a <_Z4tonehjm+0x34a>

    }
    

    // Calculate the toggle count
    if (duration > 0)
 34a:	41 14       	cp	r4, r1
 34c:	51 04       	cpc	r5, r1
 34e:	61 04       	cpc	r6, r1
 350:	71 04       	cpc	r7, r1
 352:	01 f0       	breq	.+0      	; 0x354 <_Z4tonehjm+0x354>
    {
      toggle_count = 2 * frequency * duration / 1000;
 354:	d8 01       	movw	r26, r16
 356:	aa 0f       	add	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	a3 01       	movw	r20, r6
 35c:	92 01       	movw	r18, r4
 35e:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 362:	28 ee       	ldi	r18, 0xE8	; 232
 364:	33 e0       	ldi	r19, 0x03	; 3
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	50 e0       	ldi	r21, 0x00	; 0
 36a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <_Z4tonehjm+0x370>
    }
    else
    {
      toggle_count = -1;
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	3f ef       	ldi	r19, 0xFF	; 255
 374:	a9 01       	movw	r20, r18
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	38 16       	cp	r3, r24
 37a:	01 f0       	breq	.+0      	; 0x37c <_Z4tonehjm+0x37c>
 37c:	e2 e0       	ldi	r30, 0x02	; 2
 37e:	3e 16       	cp	r3, r30
 380:	01 f0       	breq	.+0      	; 0x382 <_Z4tonehjm+0x382>
 382:	31 10       	cpse	r3, r1
 384:	00 c0       	rjmp	.+0      	; 0x386 <_Z4tonehjm+0x386>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 386:	c7 bc       	out	0x27, r12	; 39
        timer0_toggle_count = toggle_count;
 388:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
 38c:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <__SREG__+0x7fffc1>
 390:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__SREG__+0x7fffc1>
 394:	50 93 00 00 	sts	0x0000, r21	; 0x800000 <__SREG__+0x7fffc1>
        bitWrite(TIMSK0, OCIE0A, 1);
 398:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__SREG__+0x80002f>
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__SREG__+0x80002f>
        break;
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <_Z4tonehjm+0x3a4>
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 3a4:	d0 92 89 00 	sts	0x0089, r13	; 0x800089 <__SREG__+0x80004a>
 3a8:	c0 92 88 00 	sts	0x0088, r12	; 0x800088 <__SREG__+0x800049>
        timer1_toggle_count = toggle_count;
 3ac:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
 3b0:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <__SREG__+0x7fffc1>
 3b4:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__SREG__+0x7fffc1>
 3b8:	50 93 00 00 	sts	0x0000, r21	; 0x800000 <__SREG__+0x7fffc1>
        bitWrite(TIMSK1, OCIE1A, 1);
 3bc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__SREG__+0x800030>
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__SREG__+0x800030>
        // this combination is for at least the ATmega32
        OCR1A = ocr;
        timer1_toggle_count = toggle_count;
        bitWrite(TIMSK, OCIE1A, 1);
#endif
        break;
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <_Z4tonehjm+0x3c8>

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 3c8:	c0 92 b3 00 	sts	0x00B3, r12	; 0x8000b3 <__SREG__+0x800074>
        timer2_toggle_count = toggle_count;
 3cc:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
 3d0:	30 93 00 00 	sts	0x0000, r19	; 0x800000 <__SREG__+0x7fffc1>
 3d4:	40 93 00 00 	sts	0x0000, r20	; 0x800000 <__SREG__+0x7fffc1>
 3d8:	50 93 00 00 	sts	0x0000, r21	; 0x800000 <__SREG__+0x7fffc1>
        bitWrite(TIMSK2, OCIE2A, 1);
 3dc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__SREG__+0x800031>
 3e0:	82 60       	ori	r24, 0x02	; 2
 3e2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__SREG__+0x800031>
        break;
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <_Z4tonehjm+0x3e8>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <_Z4tonehjm+0x3ec>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
 3ec:	ff ef       	ldi	r31, 0xFF	; 255
 3ee:	cf 16       	cp	r12, r31
 3f0:	d1 04       	cpc	r13, r1
 3f2:	e1 04       	cpc	r14, r1
 3f4:	f1 04       	cpc	r15, r1
 3f6:	01 f0       	breq	.+0      	; 0x3f8 <_Z4tonehjm+0x3f8>
 3f8:	00 f0       	brcs	.+0      	; 0x3fa <_Z4tonehjm+0x3fa>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 3fa:	62 e1       	ldi	r22, 0x12	; 18
 3fc:	7a e7       	ldi	r23, 0x7A	; 122
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	a5 01       	movw	r20, r10
 404:	94 01       	movw	r18, r8
 406:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 40a:	69 01       	movw	r12, r18
 40c:	7a 01       	movw	r14, r20
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	c8 1a       	sub	r12, r24
 412:	d1 08       	sbc	r13, r1
 414:	e1 08       	sbc	r14, r1
 416:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
 418:	ef ef       	ldi	r30, 0xFF	; 255
 41a:	ce 16       	cp	r12, r30
 41c:	d1 04       	cpc	r13, r1
 41e:	e1 04       	cpc	r14, r1
 420:	f1 04       	cpc	r15, r1
 422:	01 f0       	breq	.+0      	; 0x424 <_Z4tonehjm+0x424>
 424:	00 f0       	brcs	.+0      	; 0x426 <_Z4tonehjm+0x426>
 426:	00 c0       	rjmp	.+0      	; 0x428 <_Z4tonehjm+0x428>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	00 c0       	rjmp	.+0      	; 0x42c <_Z4tonehjm+0x42c>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 42c:	83 e0       	ldi	r24, 0x03	; 3
 42e:	00 c0       	rjmp	.+0      	; 0x430 <_Z4tonehjm+0x430>
            prescalarbits = 0b101;
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 430:	62 e1       	ldi	r22, 0x12	; 18
 432:	7a e7       	ldi	r23, 0x7A	; 122
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	a5 01       	movw	r20, r10
 43a:	94 01       	movw	r18, r8
 43c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 440:	69 01       	movw	r12, r18
 442:	7a 01       	movw	r14, r20
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	c8 1a       	sub	r12, r24
 448:	d1 08       	sbc	r13, r1
 44a:	e1 08       	sbc	r14, r1
 44c:	f1 08       	sbc	r15, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
            if (ocr > 255)
 44e:	ef ef       	ldi	r30, 0xFF	; 255
 450:	ce 16       	cp	r12, r30
 452:	d1 04       	cpc	r13, r1
 454:	e1 04       	cpc	r14, r1
 456:	f1 04       	cpc	r15, r1
 458:	01 f0       	breq	.+0      	; 0x45a <_Z4tonehjm+0x45a>
 45a:	00 f0       	brcs	.+0      	; 0x45c <_Z4tonehjm+0x45c>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	ab 81       	ldd	r26, Y+3	; 0x03
 462:	bc 81       	ldd	r27, Y+4	; 0x04
 464:	4a e0       	ldi	r20, 0x0A	; 10
 466:	b6 95       	lsr	r27
 468:	a7 95       	ror	r26
 46a:	97 95       	ror	r25
 46c:	87 95       	ror	r24
 46e:	4a 95       	dec	r20
 470:	01 f4       	brne	.+0      	; 0x472 <_Z4tonehjm+0x472>
 472:	6c 01       	movw	r12, r24
 474:	7d 01       	movw	r14, r26
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	c2 1a       	sub	r12, r18
 47a:	d1 08       	sbc	r13, r1
 47c:	e1 08       	sbc	r14, r1
 47e:	f1 08       	sbc	r15, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 480:	33 20       	and	r3, r3
 482:	01 f4       	brne	.+0      	; 0x484 <_Z4tonehjm+0x484>
 484:	00 c0       	rjmp	.+0      	; 0x486 <_Z4tonehjm+0x486>
 486:	87 e0       	ldi	r24, 0x07	; 7
 488:	00 c0       	rjmp	.+0      	; 0x48a <_Z4tonehjm+0x48a>
          }

          if (ocr > 255)
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 48a:	86 e0       	ldi	r24, 0x06	; 6
 48c:	00 c0       	rjmp	.+0      	; 0x48e <_Z4tonehjm+0x48e>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
            prescalarbits = 0b101;
          }

          if (ocr > 255)
 48e:	ff ef       	ldi	r31, 0xFF	; 255
 490:	cf 16       	cp	r12, r31
 492:	d1 04       	cpc	r13, r1
 494:	e1 04       	cpc	r14, r1
 496:	f1 04       	cpc	r15, r1
 498:	01 f0       	breq	.+0      	; 0x49a <_Z4tonehjm+0x49a>
 49a:	00 f4       	brcc	.+0      	; 0x49c <_Z4tonehjm+0x49c>
        }

        if (ocr > 255)
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 49c:	84 e0       	ldi	r24, 0x04	; 4
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_Z4tonehjm+0x4a0>
      ocr = F_CPU / frequency / 2 - 1;
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
        prescalarbits = 0b010;  // ck/8: same for both timers
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <_Z4tonehjm+0x4a4>
        break;
#endif

    }
  }
}
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 90       	pop	r0
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	ff 90       	pop	r15
 4b6:	ef 90       	pop	r14
 4b8:	df 90       	pop	r13
 4ba:	cf 90       	pop	r12
 4bc:	bf 90       	pop	r11
 4be:	af 90       	pop	r10
 4c0:	9f 90       	pop	r9
 4c2:	8f 90       	pop	r8
 4c4:	7f 90       	pop	r7
 4c6:	6f 90       	pop	r6
 4c8:	5f 90       	pop	r5
 4ca:	4f 90       	pop	r4
 4cc:	3f 90       	pop	r3
 4ce:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
   0:	81 30       	cpi	r24, 0x01	; 1
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	00 f0       	brcs	.+0      	; 0x6 <_Z12disableTimerh+0x6>
   6:	82 30       	cpi	r24, 0x02	; 2
   8:	01 f0       	breq	.+0      	; 0xa <_Z12disableTimerh+0xa>
   a:	08 95       	ret
   c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__SREG__+0x80002f>
  10:	08 95       	ret
  12:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__SREG__+0x800030>
  16:	8d 7f       	andi	r24, 0xFD	; 253
  18:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__SREG__+0x800030>
  1c:	08 95       	ret
  1e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__SREG__+0x800031>
  22:	8d 7f       	andi	r24, 0xFD	; 253
  24:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__SREG__+0x800031>
  28:	81 e0       	ldi	r24, 0x01	; 1
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  2a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__SREG__+0x800071>
  2e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__SREG__+0x800072>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  32:	88 7f       	andi	r24, 0xF8	; 248
  34:	84 60       	ori	r24, 0x04	; 4
  36:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__SREG__+0x800072>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3a:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__SREG__+0x800074>
  3e:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:


// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
{
   0:	cf 93       	push	r28
   2:	c8 2f       	mov	r28, r24
   4:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	8c 13       	cpse	r24, r28
   a:	00 c0       	rjmp	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	e0 e0       	ldi	r30, 0x00	; 0
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	e4 91       	lpm	r30, Z
  12:	8f ef       	ldi	r24, 0xFF	; 255
  14:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  18:	00 c0       	rjmp	.+0      	; 0x1a <_Z6noToneh+0x1a>
  1a:	ef ef       	ldi	r30, 0xFF	; 255
  1c:	8e 2f       	mov	r24, r30
  1e:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  22:	60 e0       	ldi	r22, 0x00	; 0
  24:	8c 2f       	mov	r24, r28
  26:	cf 91       	pop	r28
  28:	0c 94 00 00 	jmp	0	; 0x0 <_Z6noToneh>

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  2a:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2e:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  32:	89 2b       	or	r24, r25
  34:	8a 2b       	or	r24, r26
  36:	8b 2b       	or	r24, r27
  38:	01 f0       	breq	.+0      	; 0x3a <__vector_7+0x3a>
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3a:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  3e:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
      tone_pins[i] = _pin;
  42:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  46:	90 81       	ld	r25, Z
  48:	89 27       	eor	r24, r25
  4a:	80 83       	st	Z, r24
      break;
    }
  }
  
  if (_timer != -1)
  4c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  50:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  54:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  58:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  5c:	18 16       	cp	r1, r24
  5e:	19 06       	cpc	r1, r25
    {
      #if defined(TCCR0A) && defined(TCCR0B) && defined(WGM01)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  60:	1a 06       	cpc	r1, r26
        TCCR0B = 0;
  62:	1b 06       	cpc	r1, r27
        bitWrite(TCCR0A, WGM01, 1);
  64:	04 f4       	brge	.+0      	; 0x66 <__vector_7+0x66>
  66:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
        bitWrite(TCCR0B, CS00, 1);
  6a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  6e:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  72:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	a1 09       	sbc	r26, r1
  7a:	b1 09       	sbc	r27, r1
  7c:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  80:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  84:	a0 93 00 00 	sts	0x0000, r26	; 0x800000 <__SREG__+0x7fffc1>
  88:	b0 93 00 00 	sts	0x0000, r27	; 0x800000 <__SREG__+0x7fffc1>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <__vector_7+0x8e>
  8e:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
        timer0_pin_mask = digitalPinToBitMask(_pin);
  92:	0e 94 00 00 	call	0	; 0x0 <__vector_7>
  96:	ff 91       	pop	r31
  98:	ef 91       	pop	r30
  9a:	bf 91       	pop	r27
  9c:	af 91       	pop	r26
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
  a2:	7f 91       	pop	r23
  a4:	6f 91       	pop	r22
        TCCR1B = 0;
  a6:	5f 91       	pop	r21
  a8:	4f 91       	pop	r20
        bitWrite(TCCR1B, WGM12, 1);
  aa:	3f 91       	pop	r19
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
        bitWrite(TCCR1B, CS10, 1);
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001192  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000012  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007d4  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011a0  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.nothing 00000002  00000000  00000000  000019a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.attachInterrupt 00000040  00000000  00000000  000019aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.detachInterrupt 00000024  00000000  00000000  000019ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_1 0000004e  00000000  00000000  00001a0e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_2 0000004e  00000000  00000000  00001a5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .data.intFunc 00000004  00000000  00000000  00001aaa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
 11 .comment      00000012  00000000  00000000  00001aae  2**0
                  CONTENTS, READONLY

Disassembly of section .text.nothing:

00000000 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
   0:	08 95       	ret

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	e8 2f       	mov	r30, r24
   6:	f0 e0       	ldi	r31, 0x00	; 0
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	71 83       	std	Z+1, r23	; 0x01
  12:	60 83       	st	Z, r22
  14:	81 30       	cpi	r24, 0x01	; 1
  16:	01 f0       	breq	.+0      	; 0x18 <attachInterrupt+0x18>
  18:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__SREG__+0x80002a>
  1c:	8c 7f       	andi	r24, 0xFC	; 252
  1e:	48 2b       	or	r20, r24
  20:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__SREG__+0x80002a>
  24:	e8 9a       	sbi	0x1d, 0	; 29
  26:	08 95       	ret
  28:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__SREG__+0x80002a>
  2c:	44 0f       	add	r20, r20
  2e:	55 1f       	adc	r21, r21
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	83 7f       	andi	r24, 0xF3	; 243
  36:	48 2b       	or	r20, r24
  38:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__SREG__+0x80002a>
  3c:	e9 9a       	sbi	0x1d, 1	; 29
  3e:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
   4:	81 30       	cpi	r24, 0x01	; 1
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	e8 98       	cbi	0x1d, 0	; 29
   a:	00 c0       	rjmp	.+0      	; 0xc <detachInterrupt+0xc>
   c:	e9 98       	cbi	0x1d, 1	; 29
   e:	e8 2f       	mov	r30, r24
  10:	f0 e0       	ldi	r31, 0x00	; 0
  12:	ee 0f       	add	r30, r30
  14:	ff 1f       	adc	r31, r31
  16:	e0 50       	subi	r30, 0x00	; 0
  18:	f0 40       	sbci	r31, 0x00	; 0
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	91 83       	std	Z+1, r25	; 0x01
  20:	80 83       	st	Z, r24
  22:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2a:	09 95       	icall
  2c:	ff 91       	pop	r31
  2e:	ef 91       	pop	r30
  30:	bf 91       	pop	r27
  32:	af 91       	pop	r26
  34:	9f 91       	pop	r25
  36:	8f 91       	pop	r24
  38:	7f 91       	pop	r23
  3a:	6f 91       	pop	r22
  3c:	5f 91       	pop	r21
  3e:	4f 91       	pop	r20
  40:	3f 91       	pop	r19
  42:	2f 91       	pop	r18
  44:	0f 90       	pop	r0
  46:	0f be       	out	0x3f, r0	; 63
  48:	0f 90       	pop	r0
  4a:	1f 90       	pop	r1
  4c:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	4f 93       	push	r20
  10:	5f 93       	push	r21
  12:	6f 93       	push	r22
  14:	7f 93       	push	r23
  16:	8f 93       	push	r24
  18:	9f 93       	push	r25
  1a:	af 93       	push	r26
  1c:	bf 93       	push	r27
  1e:	ef 93       	push	r30
  20:	ff 93       	push	r31
  22:	e0 91 00 00 	lds	r30, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  26:	f0 91 00 00 	lds	r31, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  2a:	09 95       	icall
  2c:	ff 91       	pop	r31
  2e:	ef 91       	pop	r30
  30:	bf 91       	pop	r27
  32:	af 91       	pop	r26
  34:	9f 91       	pop	r25
  36:	8f 91       	pop	r24
  38:	7f 91       	pop	r23
  3a:	6f 91       	pop	r22
  3c:	5f 91       	pop	r21
  3e:	4f 91       	pop	r20
  40:	3f 91       	pop	r19
  42:	2f 91       	pop	r18
  44:	0f 90       	pop	r0
  46:	0f be       	out	0x3f, r0	; 63
  48:	0f 90       	pop	r0
  4a:	1f 90       	pop	r1
  4c:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000534  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000adb  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z10randomSeedm 00000010  00000000  00000000  00001043  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6randoml 00000048  00000000  00000000  00001053  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6randomll 00000044  00000000  00000000  0000109b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z3maplllll 00000082  00000000  00000000  000010df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8makeWordj 00000002  00000000  00000000  00001161  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._Z8makeWordhh 0000000a  00000000  00000000  00001163  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .comment      00000012  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Z10randomSeedm:

00000000 <_Z10randomSeedm>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	81 05       	cpc	r24, r1
   6:	91 05       	cpc	r25, r1
   8:	01 f0       	breq	.+0      	; 0xa <_Z10randomSeedm+0xa>
    srandom(seed);
   a:	0c 94 00 00 	jmp	0	; 0x0 <_Z10randomSeedm>
   e:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z6randoml+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_Z6randoml+0x8>
   8:	cd b7       	in	r28, 0x3d	; 61
    srandom(seed);
   a:	de b7       	in	r29, 0x3e	; 62
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	81 05       	cpc	r24, r1
  12:	91 05       	cpc	r25, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_Z6randoml+0x16>
  16:	9b 01       	movw	r18, r22
  18:	ac 01       	movw	r20, r24
  1a:	69 83       	std	Y+1, r22	; 0x01
  1c:	3a 83       	std	Y+2, r19	; 0x02
  1e:	4b 83       	std	Y+3, r20	; 0x03
  20:	5c 83       	std	Y+4, r21	; 0x04
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  26:	29 81       	ldd	r18, Y+1	; 0x01
  28:	3a 81       	ldd	r19, Y+2	; 0x02
  2a:	4b 81       	ldd	r20, Y+3	; 0x03
  2c:	5c 81       	ldd	r21, Y+4	; 0x04
  2e:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_Z6randoml+0x34>
  34:	60 e0       	ldi	r22, 0x00	; 0
  36:	70 e0       	ldi	r23, 0x00	; 0
  38:	cb 01       	movw	r24, r22
  3a:	0f 90       	pop	r0
  3c:	0f 90       	pop	r0
  3e:	0f 90       	pop	r0
  40:	0f 90       	pop	r0
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
    srandom(seed);
   a:	1f 93       	push	r17
   c:	62 17       	cp	r22, r18
   e:	73 07       	cpc	r23, r19
  10:	84 07       	cpc	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	04 f4       	brge	.+0      	; 0x16 <_Z6randomll+0x16>
  16:	89 01       	movw	r16, r18
  18:	9a 01       	movw	r18, r20
  1a:	6b 01       	movw	r12, r22
  1c:	7c 01       	movw	r14, r24
  1e:	c9 01       	movw	r24, r18
  20:	b8 01       	movw	r22, r16
  22:	6c 19       	sub	r22, r12
  24:	7d 09       	sbc	r23, r13
  26:	8e 09       	sbc	r24, r14
  28:	9f 09       	sbc	r25, r15
  2a:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  2e:	6c 0d       	add	r22, r12
  30:	7d 1d       	adc	r23, r13
  32:	8e 1d       	adc	r24, r14
  34:	9f 1d       	adc	r25, r15
  36:	1f 91       	pop	r17
  38:	0f 91       	pop	r16
  3a:	ff 90       	pop	r15
  3c:	ef 90       	pop	r14
  3e:	df 90       	pop	r13
  40:	cf 90       	pop	r12
  42:	08 95       	ret

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	af 92       	push	r10
    srandom(seed);
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	29 01       	movw	r4, r18
  22:	3a 01       	movw	r6, r20
  24:	9b 01       	movw	r18, r22
  26:	ac 01       	movw	r20, r24
  28:	24 19       	sub	r18, r4
  2a:	35 09       	sbc	r19, r5
  2c:	46 09       	sbc	r20, r6
  2e:	57 09       	sbc	r21, r7
  30:	89 89       	ldd	r24, Y+17	; 0x11
  32:	9a 89       	ldd	r25, Y+18	; 0x12
  34:	ab 89       	ldd	r26, Y+19	; 0x13
  36:	bc 89       	ldd	r27, Y+20	; 0x14
  38:	bc 01       	movw	r22, r24
  3a:	cd 01       	movw	r24, r26
  3c:	6a 19       	sub	r22, r10
  3e:	7b 09       	sbc	r23, r11
  40:	8c 09       	sbc	r24, r12
  42:	9d 09       	sbc	r25, r13
  44:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  48:	a8 01       	movw	r20, r16
  4a:	97 01       	movw	r18, r14
  4c:	24 19       	sub	r18, r4
  4e:	35 09       	sbc	r19, r5
  50:	46 09       	sbc	r20, r6
  52:	57 09       	sbc	r21, r7
  54:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  58:	ca 01       	movw	r24, r20
  5a:	b9 01       	movw	r22, r18
  5c:	6a 0d       	add	r22, r10
  5e:	7b 1d       	adc	r23, r11
  60:	8c 1d       	adc	r24, r12
  62:	9d 1d       	adc	r25, r13
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	df 90       	pop	r13
  72:	cf 90       	pop	r12
  74:	bf 90       	pop	r11
  76:	af 90       	pop	r10
  78:	7f 90       	pop	r7
  7a:	6f 90       	pop	r6
  7c:	5f 90       	pop	r5
  7e:	4f 90       	pop	r4
  80:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:
  #include "stdlib.h"
}

void randomSeed(unsigned long seed)
{
  if (seed != 0) {
   0:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	70 e0       	ldi	r23, 0x00	; 0
   2:	9b 01       	movw	r18, r22
   4:	38 2b       	or	r19, r24
   6:	c9 01       	movw	r24, r18
   8:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .group        00000008  00000000  00000000  00000034  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  1 .group        00000008  00000000  00000000  0000003c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  2 .group        00000008  00000000  00000000  00000044  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  3 .group        00000008  00000000  00000000  0000004c  2**2
                  CONTENTS, READONLY, EXCLUDE, GROUP, LINK_ONCE_DISCARD
  4 .text         00000000  00000000  00000000  00000054  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data         00000000  00000000  00000000  00000054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000000  00000000  00000000  00000054  2**0
                  ALLOC
  7 .stab         00002c4c  00000000  00000000  00000054  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .stabstr      00002569  00000000  00000000  00002ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .text.itoa    00000004  00000000  00000000  00005209  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.ltoa    00000004  00000000  00000000  0000520d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.utoa    00000004  00000000  00000000  00005211  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.ultoa   00000004  00000000  00000000  00005215  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6StringD2Ev 0000000a  00000000  00000000  00005219  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6String10invalidateEv 00000024  00000000  00000000  00005223  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  00005247  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6String7reserveEj 00000038  00000000  00000000  0000527b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  000052b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6StringC2EPKc 0000002a  00000000  00000000  000052f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6String4copyEPK19__FlashStringHelperj 00000042  00000000  00000000  0000531f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  00005361  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6StringC2ERKS_ 00000012  00000000  00000000  0000538f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6StringaSEPKc 0000002e  00000000  00000000  000053a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6StringC2Ec 00000030  00000000  00000000  000053cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6StringC2Ehh 0000005a  00000000  00000000  000053ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6StringC2Eih 00000058  00000000  00000000  00005459  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6StringC2Ejh 00000058  00000000  00000000  000054b1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6StringC2Elh 0000005a  00000000  00000000  00005509  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6StringC2Emh 0000005a  00000000  00000000  00005563  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN6StringC2Efh 00000060  00000000  00000000  000055bd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN6StringC2Edh 00000060  00000000  00000000  0000561d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN6StringaSEPK19__FlashStringHelper 00000042  00000000  00000000  0000567d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN6StringC2EPK19__FlashStringHelper 00000012  00000000  00000000  000056bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN6String6concatEPKcj 0000005c  00000000  00000000  000056d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN6String6concatERKS_ 0000000e  00000000  00000000  0000572d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String6concatEPKc 0000001e  00000000  00000000  0000573b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String6concatEc 00000026  00000000  00000000  00005759  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6String6concatEh 00000058  00000000  00000000  0000577f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6String6concatEi 00000062  00000000  00000000  000057d7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6String6concatEj 00000062  00000000  00000000  00005839  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6String6concatEl 00000064  00000000  00000000  0000589b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6String6concatEm 00000064  00000000  00000000  000058ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6String6concatEf 00000062  00000000  00000000  00005963  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6String6concatEd 00000062  00000000  00000000  000059c5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6String6concatEPK19__FlashStringHelper 00000060  00000000  00000000  00005a27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZplRK15StringSumHelperRK6String 00000026  00000000  00000000  00005a87  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZplRK15StringSumHelperPKc 00000032  00000000  00000000  00005aad  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZplRK15StringSumHelperc 0000001c  00000000  00000000  00005adf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZplRK15StringSumHelperh 0000001c  00000000  00000000  00005afb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZplRK15StringSumHelperi 0000001c  00000000  00000000  00005b17  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZplRK15StringSumHelperj 0000001c  00000000  00000000  00005b33  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZplRK15StringSumHelperl 0000001c  00000000  00000000  00005b4f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZplRK15StringSumHelperm 0000001c  00000000  00000000  00005b6b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZplRK15StringSumHelperf 0000001c  00000000  00000000  00005b87  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZplRK15StringSumHelperd 0000001c  00000000  00000000  00005ba3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZplRK15StringSumHelperPK19__FlashStringHelper 0000001c  00000000  00000000  00005bbf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZNK6String9compareToERKS_ 00000060  00000000  00000000  00005bdb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZNK6String6equalsERKS_ 00000022  00000000  00000000  00005c3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZNK6String6equalsEPKc 0000003e  00000000  00000000  00005c5d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00005c9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  00005ca9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  00005cbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00005ccd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000070  00000000  00000000  00005cdd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZNK6String10startsWithERKS_j 0000004c  00000000  00000000  00005d4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZNK6String10startsWithERKS_ 0000001e  00000000  00000000  00005d99  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZNK6String8endsWithERKS_ 00000040  00000000  00000000  00005db7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6String9setCharAtEjc 0000001a  00000000  00000000  00005df7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6StringixEj 00000024  00000000  00000000  00005e11  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZNK6StringixEj 00000022  00000000  00000000  00005e35  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text._ZNK6String6charAtEj 00000004  00000000  00000000  00005e57  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZNK6String8getBytesEPhjj 0000005e  00000000  00000000  00005e5b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZNK6String7indexOfEcj 00000038  00000000  00000000  00005eb9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZNK6String7indexOfEc 00000008  00000000  00000000  00005ef1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZNK6String7indexOfERKS_j 0000003a  00000000  00000000  00005ef9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZNK6String7indexOfERKS_ 00000008  00000000  00000000  00005f33  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZNK6String11lastIndexOfEcj 0000006e  00000000  00000000  00005f3b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZNK6String11lastIndexOfEc 0000000e  00000000  00000000  00005fa9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  00005fb7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 79 .text._ZNK6String11lastIndexOfERKS_ 00000014  00000000  00000000  00006053  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 80 .rodata.str1.1 00000001  00000000  00000000  00006067  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 81 .text._ZNK6String9substringEjj 0000008c  00000000  00000000  00006068  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 82 .text._ZN6String7replaceEcc 0000001c  00000000  00000000  000060f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 83 .text._ZN6String7replaceERKS_S1_ 000001fc  00000000  00000000  00006110  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 84 .text._ZN6String6removeEjj 00000064  00000000  00000000  0000630c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 85 .text._ZN6String6removeEj 00000008  00000000  00000000  00006370  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 86 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  00006378  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 87 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  000063a0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 88 .text._ZN6String4trimEv 000000be  00000000  00000000  000063c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 89 .text._ZNK6String5toIntEv 00000016  00000000  00000000  00006486  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 90 .text._ZNK6String8toDoubleEv 00000016  00000000  00000000  0000649c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 91 .text._ZNK6String7toFloatEv 00000004  00000000  00000000  000064b2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 92 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  000064b6  2**0
                  ALLOC
 93 .comment      00000012  00000000  00000000  000064b6  2**0
                  CONTENTS, READONLY

Disassembly of section .text.itoa:

00000000 <itoa>:
	return 0;
}

float String::toFloat(void) const
{
	return float(toDouble());
   0:	0c 94 00 00 	jmp	0	; 0x0 <itoa>

Disassembly of section .text.ltoa:

00000000 <ltoa>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <ltoa>

Disassembly of section .text.utoa:

00000000 <utoa>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <utoa>

Disassembly of section .text.ultoa:

00000000 <ultoa>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <ultoa>

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD1Ev>:
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringD1Ev>

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	18 82       	st	Y, r1
  16:	1d 82       	std	Y+5, r1	; 0x05
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	6f 5f       	subi	r22, 0xFF	; 255
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	99 83       	std	Y+1, r25	; 0x01
  1e:	88 83       	st	Y, r24
  20:	1b 83       	std	Y+3, r17	; 0x03
  22:	0a 83       	std	Y+2, r16	; 0x02
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6String12changeBufferEj+0x28>
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	89 2b       	or	r24, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
  14:	97 07       	cpc	r25, r23
  16:	00 f4       	brcc	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	9d 81       	ldd	r25, Y+5	; 0x05
  26:	89 2b       	or	r24, r25
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6String7reserveEj+0x2a>
  2a:	e8 81       	ld	r30, Y
  2c:	f9 81       	ldd	r31, Y+1	; 0x01
  2e:	10 82       	st	Z, r1
  30:	81 e0       	ldi	r24, 0x01	; 1
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  18:	81 11       	cpse	r24, r1
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
  28:	b7 01       	movw	r22, r14
  2a:	88 81       	ld	r24, Y
  2c:	99 81       	ldd	r25, Y+1	; 0x01
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC1EPKc>:
   0:	fc 01       	movw	r30, r24
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	61 15       	cp	r22, r1
  10:	71 05       	cpc	r23, r1
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN6StringC1EPKc+0x14>
  14:	fb 01       	movw	r30, r22
  16:	01 90       	ld	r0, Z+
  18:	00 20       	and	r0, r0
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6StringC1EPKc+0x1c>
  1c:	31 97       	sbiw	r30, 0x01	; 1
  1e:	af 01       	movw	r20, r30
  20:	46 1b       	sub	r20, r22
  22:	57 0b       	sbc	r21, r23
  24:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringC1EPKc>
  28:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPK19__FlashStringHelperj:

00000000 <_ZN6String4copyEPK19__FlashStringHelperj>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPK19__FlashStringHelperj>
  18:	81 11       	cpse	r24, r1
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6String4copyEPK19__FlashStringHelperj+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPK19__FlashStringHelperj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPK19__FlashStringHelperj+0x24>
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
  28:	b7 01       	movw	r22, r14
  2a:	88 81       	ld	r24, Y
  2c:	99 81       	ldd	r25, Y+1	; 0x01
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPK19__FlashStringHelperj>
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	86 17       	cp	r24, r22
   a:	97 07       	cpc	r25, r23
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSERKS_+0xe>
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6StringaSERKS_+0x18>
  18:	44 81       	ldd	r20, Z+4	; 0x04
  1a:	55 81       	ldd	r21, Z+5	; 0x05
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringaSERKS_+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  26:	ce 01       	movw	r24, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC1ERKS_>:
   0:	fc 01       	movw	r30, r24
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringC1ERKS_>

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZN6StringaSEPKc+0xc>
   c:	fb 01       	movw	r30, r22
   e:	01 90       	ld	r0, Z+
  10:	00 20       	and	r0, r0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringaSEPKc+0x14>
  14:	31 97       	sbiw	r30, 0x01	; 1
  16:	af 01       	movw	r20, r30
  18:	46 1b       	sub	r20, r22
  1a:	57 0b       	sbc	r21, r23
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringaSEPKc+0x22>
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  26:	ce 01       	movw	r24, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC1Ec>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6StringC1Ec+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	fc 01       	movw	r30, r24
   c:	11 82       	std	Z+1, r1	; 0x01
   e:	10 82       	st	Z, r1
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
  14:	15 82       	std	Z+5, r1	; 0x05
  16:	14 82       	std	Z+4, r1	; 0x04
  18:	69 83       	std	Y+1, r22	; 0x01
  1a:	1a 82       	std	Y+2, r1	; 0x02
  1c:	be 01       	movw	r22, r28
  1e:	6f 5f       	subi	r22, 0xFF	; 255
  20:	7f 4f       	sbci	r23, 0xFF	; 255
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
  26:	0f 90       	pop	r0
  28:	0f 90       	pop	r0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC1Ehh>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	29 97       	sbiw	r28, 0x09	; 9
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	86 2f       	mov	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	be 01       	movw	r22, r28
  2e:	6f 5f       	subi	r22, 0xFF	; 255
  30:	7f 4f       	sbci	r23, 0xFF	; 255
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  38:	be 01       	movw	r22, r28
  3a:	6f 5f       	subi	r22, 0xFF	; 255
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  44:	29 96       	adiw	r28, 0x09	; 9
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC1Eih>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	62 97       	sbiw	r28, 0x12	; 18
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	be 01       	movw	r22, r28
  2e:	6f 5f       	subi	r22, 0xFF	; 255
  30:	7f 4f       	sbci	r23, 0xFF	; 255
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  36:	be 01       	movw	r22, r28
  38:	6f 5f       	subi	r22, 0xFF	; 255
  3a:	7f 4f       	sbci	r23, 0xFF	; 255
  3c:	c8 01       	movw	r24, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  42:	62 96       	adiw	r28, 0x12	; 18
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC1Ejh>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	61 97       	sbiw	r28, 0x11	; 17
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	be 01       	movw	r22, r28
  2e:	6f 5f       	subi	r22, 0xFF	; 255
  30:	7f 4f       	sbci	r23, 0xFF	; 255
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  36:	be 01       	movw	r22, r28
  38:	6f 5f       	subi	r22, 0xFF	; 255
  3a:	7f 4f       	sbci	r23, 0xFF	; 255
  3c:	c8 01       	movw	r24, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  42:	61 96       	adiw	r28, 0x11	; 17
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC1Elh>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	a2 97       	sbiw	r28, 0x22	; 34
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	ba 01       	movw	r22, r20
  1e:	f8 01       	movw	r30, r16
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	ae 01       	movw	r20, r28
  30:	4f 5f       	subi	r20, 0xFF	; 255
  32:	5f 4f       	sbci	r21, 0xFF	; 255
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  38:	be 01       	movw	r22, r28
  3a:	6f 5f       	subi	r22, 0xFF	; 255
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  44:	a2 96       	adiw	r28, 0x22	; 34
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC1Emh>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	a1 97       	sbiw	r28, 0x21	; 33
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	ba 01       	movw	r22, r20
  1e:	f8 01       	movw	r30, r16
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	ae 01       	movw	r20, r28
  30:	4f 5f       	subi	r20, 0xFF	; 255
  32:	5f 4f       	sbci	r21, 0xFF	; 255
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  38:	be 01       	movw	r22, r28
  3a:	6f 5f       	subi	r22, 0xFF	; 255
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	c8 01       	movw	r24, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  44:	a1 96       	adiw	r28, 0x21	; 33
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Efh:

00000000 <_ZN6StringC1Efh>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	f7 01       	movw	r30, r14
  24:	11 82       	std	Z+1, r1	; 0x01
  26:	10 82       	st	Z, r1
  28:	13 82       	std	Z+3, r1	; 0x03
  2a:	12 82       	std	Z+2, r1	; 0x02
  2c:	15 82       	std	Z+5, r1	; 0x05
  2e:	14 82       	std	Z+4, r1	; 0x04
  30:	42 e0       	ldi	r20, 0x02	; 2
  32:	42 0f       	add	r20, r18
  34:	8e 01       	movw	r16, r28
  36:	0f 5f       	subi	r16, 0xFF	; 255
  38:	1f 4f       	sbci	r17, 0xFF	; 255
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Efh>
  3e:	bc 01       	movw	r22, r24
  40:	c7 01       	movw	r24, r14
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Efh>
  46:	a1 96       	adiw	r28, 0x21	; 33
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Edh:

00000000 <_ZN6StringC1Edh>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	f7 01       	movw	r30, r14
  24:	11 82       	std	Z+1, r1	; 0x01
  26:	10 82       	st	Z, r1
  28:	13 82       	std	Z+3, r1	; 0x03
  2a:	12 82       	std	Z+2, r1	; 0x02
  2c:	15 82       	std	Z+5, r1	; 0x05
  2e:	14 82       	std	Z+4, r1	; 0x04
  30:	42 e0       	ldi	r20, 0x02	; 2
  32:	42 0f       	add	r20, r18
  34:	8e 01       	movw	r16, r28
  36:	0f 5f       	subi	r16, 0xFF	; 255
  38:	1f 4f       	sbci	r17, 0xFF	; 255
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Edh>
  3e:	bc 01       	movw	r22, r24
  40:	c7 01       	movw	r24, r14
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Edh>
  46:	a1 96       	adiw	r28, 0x21	; 33
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPK19__FlashStringHelper:

00000000 <_ZN6StringaSEPK19__FlashStringHelper>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN6StringaSEPK19__FlashStringHelper+0xa>
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8c 01       	movw	r16, r24
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6StringaSEPK19__FlashStringHelper+0x16>
  16:	cb 01       	movw	r24, r22
  18:	69 83       	std	Y+1, r22	; 0x01
  1a:	7a 83       	std	Y+2, r23	; 0x02
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPK19__FlashStringHelper>
  20:	ac 01       	movw	r20, r24
  22:	69 81       	ldd	r22, Y+1	; 0x01
  24:	7a 81       	ldd	r23, Y+2	; 0x02
  26:	c8 01       	movw	r24, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPK19__FlashStringHelper>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6StringaSEPK19__FlashStringHelper+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPK19__FlashStringHelper>
  32:	c8 01       	movw	r24, r16
  34:	0f 90       	pop	r0
  36:	0f 90       	pop	r0
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPK19__FlashStringHelper:

00000000 <_ZN6StringC1EPK19__FlashStringHelper>:
   0:	fc 01       	movw	r30, r24
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6StringC1EPK19__FlashStringHelper>

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	24 81       	ldd	r18, Z+4	; 0x04
  10:	35 81       	ldd	r19, Z+5	; 0x05
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6String6concatEPKcj+0x18>
  18:	80 e0       	ldi	r24, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6String6concatEPKcj+0x1c>
  1c:	41 15       	cp	r20, r1
  1e:	51 05       	cpc	r21, r1
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String6concatEPKcj+0x22>
  22:	7b 01       	movw	r14, r22
  24:	ec 01       	movw	r28, r24
  26:	8a 01       	movw	r16, r20
  28:	02 0f       	add	r16, r18
  2a:	13 1f       	adc	r17, r19
  2c:	b8 01       	movw	r22, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN6String6concatEPKcj+0x36>
  36:	28 81       	ld	r18, Y
  38:	39 81       	ldd	r19, Y+1	; 0x01
  3a:	8c 81       	ldd	r24, Y+4	; 0x04
  3c:	9d 81       	ldd	r25, Y+5	; 0x05
  3e:	b7 01       	movw	r22, r14
  40:	82 0f       	add	r24, r18
  42:	93 1f       	adc	r25, r19
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  48:	1d 83       	std	Y+5, r17	; 0x05
  4a:	0c 83       	std	Y+4, r16	; 0x04
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:
   0:	fb 01       	movw	r30, r22
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	60 81       	ld	r22, Z
   8:	71 81       	ldd	r23, Z+1	; 0x01
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String6concatERKS_>

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	fb 01       	movw	r30, r22
   8:	01 90       	ld	r0, Z+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String6concatEPKc+0xe>
   e:	31 97       	sbiw	r30, 0x01	; 1
  10:	af 01       	movw	r20, r30
  12:	46 1b       	sub	r20, r22
  14:	57 0b       	sbc	r21, r23
  16:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String6concatEPKc>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6String6concatEc+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	69 83       	std	Y+1, r22	; 0x01
   c:	1a 82       	std	Y+2, r1	; 0x02
   e:	41 e0       	ldi	r20, 0x01	; 1
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	be 01       	movw	r22, r28
  14:	6f 5f       	subi	r22, 0xFF	; 255
  16:	7f 4f       	sbci	r23, 0xFF	; 255
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
  1c:	0f 90       	pop	r0
  1e:	0f 90       	pop	r0
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEh+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
  18:	4a e0       	ldi	r20, 0x0A	; 10
  1a:	50 e0       	ldi	r21, 0x00	; 0
  1c:	8e 01       	movw	r16, r28
  1e:	0f 5f       	subi	r16, 0xFF	; 255
  20:	1f 4f       	sbci	r17, 0xFF	; 255
  22:	b8 01       	movw	r22, r16
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	31 97       	sbiw	r30, 0x01	; 1
  34:	af 01       	movw	r20, r30
  36:	40 1b       	sub	r20, r16
  38:	51 0b       	sbc	r21, r17
  3a:	b8 01       	movw	r22, r16
  3c:	c7 01       	movw	r24, r14
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	ef 90       	pop	r14
  56:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	28 97       	sbiw	r28, 0x08	; 8
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	4a e0       	ldi	r20, 0x0A	; 10
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	8e 01       	movw	r16, r28
  26:	0f 5f       	subi	r16, 0xFF	; 255
  28:	1f 4f       	sbci	r17, 0xFF	; 255
  2a:	b8 01       	movw	r22, r16
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	31 97       	sbiw	r30, 0x01	; 1
  3a:	af 01       	movw	r20, r30
  3c:	40 1b       	sub	r20, r16
  3e:	51 0b       	sbc	r21, r17
  40:	b8 01       	movw	r22, r16
  42:	c7 01       	movw	r24, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  48:	28 96       	adiw	r28, 0x08	; 8
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	4a e0       	ldi	r20, 0x0A	; 10
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	8e 01       	movw	r16, r28
  26:	0f 5f       	subi	r16, 0xFF	; 255
  28:	1f 4f       	sbci	r17, 0xFF	; 255
  2a:	b8 01       	movw	r22, r16
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEj+0x38>
  38:	31 97       	sbiw	r30, 0x01	; 1
  3a:	af 01       	movw	r20, r30
  3c:	40 1b       	sub	r20, r16
  3e:	51 0b       	sbc	r21, r17
  40:	b8 01       	movw	r22, r16
  42:	c7 01       	movw	r24, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  48:	27 96       	adiw	r28, 0x07	; 7
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2e 97       	sbiw	r28, 0x0e	; 14
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	2a e0       	ldi	r18, 0x0A	; 10
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	8e 01       	movw	r16, r28
  28:	0f 5f       	subi	r16, 0xFF	; 255
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	a8 01       	movw	r20, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	af 01       	movw	r20, r30
  3e:	40 1b       	sub	r20, r16
  40:	51 0b       	sbc	r21, r17
  42:	b8 01       	movw	r22, r16
  44:	c7 01       	movw	r24, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  4a:	2e 96       	adiw	r28, 0x0e	; 14
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2d 97       	sbiw	r28, 0x0d	; 13
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	2a e0       	ldi	r18, 0x0A	; 10
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	8e 01       	movw	r16, r28
  28:	0f 5f       	subi	r16, 0xFF	; 255
  2a:	1f 4f       	sbci	r17, 0xFF	; 255
  2c:	a8 01       	movw	r20, r16
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	af 01       	movw	r20, r30
  3e:	40 1b       	sub	r20, r16
  40:	51 0b       	sbc	r21, r17
  42:	b8 01       	movw	r22, r16
  44:	c7 01       	movw	r24, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  4a:	2d 96       	adiw	r28, 0x0d	; 13
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEf:

00000000 <_ZN6String6concatEf>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	64 97       	sbiw	r28, 0x14	; 20
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	22 e0       	ldi	r18, 0x02	; 2
  2a:	44 e0       	ldi	r20, 0x04	; 4
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEf>
  30:	bc 01       	movw	r22, r24
  32:	fc 01       	movw	r30, r24
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEf+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	af 01       	movw	r20, r30
  3e:	48 1b       	sub	r20, r24
  40:	59 0b       	sbc	r21, r25
  42:	c7 01       	movw	r24, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEf>
  48:	64 96       	adiw	r28, 0x14	; 20
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6String6concatEd:

00000000 <_ZN6String6concatEd>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	64 97       	sbiw	r28, 0x14	; 20
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	22 e0       	ldi	r18, 0x02	; 2
  2a:	44 e0       	ldi	r20, 0x04	; 4
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEd>
  30:	bc 01       	movw	r22, r24
  32:	fc 01       	movw	r30, r24
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEd+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	af 01       	movw	r20, r30
  3e:	48 1b       	sub	r20, r24
  40:	59 0b       	sbc	r21, r25
  42:	c7 01       	movw	r24, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEd>
  48:	64 96       	adiw	r28, 0x14	; 20
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPK19__FlashStringHelper:

00000000 <_ZN6String6concatEPK19__FlashStringHelper>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String6concatEPK19__FlashStringHelper+0x12>
  12:	80 e0       	ldi	r24, 0x00	; 0
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN6String6concatEPK19__FlashStringHelper+0x16>
  16:	8b 01       	movw	r16, r22
  18:	ec 01       	movw	r28, r24
  1a:	cb 01       	movw	r24, r22
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPK19__FlashStringHelper>
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN6String6concatEPK19__FlashStringHelper+0x24>
  24:	2c 81       	ldd	r18, Y+4	; 0x04
  26:	3d 81       	ldd	r19, Y+5	; 0x05
  28:	7c 01       	movw	r14, r24
  2a:	e2 0e       	add	r14, r18
  2c:	f3 1e       	adc	r15, r19
  2e:	b7 01       	movw	r22, r14
  30:	ce 01       	movw	r24, r28
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPK19__FlashStringHelper>
  36:	88 23       	and	r24, r24
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN6String6concatEPK19__FlashStringHelper+0x3a>
  3a:	28 81       	ld	r18, Y
  3c:	39 81       	ldd	r19, Y+1	; 0x01
  3e:	8c 81       	ldd	r24, Y+4	; 0x04
  40:	9d 81       	ldd	r25, Y+5	; 0x05
  42:	b8 01       	movw	r22, r16
  44:	82 0f       	add	r24, r18
  46:	93 1f       	adc	r25, r19
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPK19__FlashStringHelper>
  4c:	fd 82       	std	Y+5, r15	; 0x05
  4e:	ec 82       	std	Y+4, r14	; 0x04
  50:	81 e0       	ldi	r24, 0x01	; 1
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	44 81       	ldd	r20, Z+4	; 0x04
   a:	55 81       	ldd	r21, Z+5	; 0x05
   c:	60 81       	ld	r22, Z
   e:	71 81       	ldd	r23, Z+1	; 0x01
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  14:	81 11       	cpse	r24, r1
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZplRK15StringSumHelperRK6String+0x18>
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  1e:	ce 01       	movw	r24, r28
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZplRK15StringSumHelperPKc+0xc>
   c:	fb 01       	movw	r30, r22
   e:	01 90       	ld	r0, Z+
  10:	00 20       	and	r0, r0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZplRK15StringSumHelperPKc+0x14>
  14:	31 97       	sbiw	r30, 0x01	; 1
  16:	af 01       	movw	r20, r30
  18:	46 1b       	sub	r20, r22
  1a:	57 0b       	sbc	r21, r23
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  20:	81 11       	cpse	r24, r1
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZplRK15StringSumHelperPKc+0x24>
  24:	ce 01       	movw	r24, r28
  26:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  2a:	ce 01       	movw	r24, r28
  2c:	df 91       	pop	r29
  2e:	cf 91       	pop	r28
  30:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperc+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperh+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperi+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperj+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperl+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperm+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperf:

00000000 <_ZplRK15StringSumHelperf>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperf>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperf+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperf>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperd:

00000000 <_ZplRK15StringSumHelperd>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperd>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperd+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperd>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPK19__FlashStringHelper:

00000000 <_ZplRK15StringSumHelperPK19__FlashStringHelper>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPK19__FlashStringHelper>
   a:	81 11       	cpse	r24, r1
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZplRK15StringSumHelperPK19__FlashStringHelper+0xe>
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPK19__FlashStringHelper>
  14:	ce 01       	movw	r24, r28
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	ed 91       	ld	r30, X+
   8:	fc 91       	ld	r31, X
   a:	eb 01       	movw	r28, r22
   c:	a8 81       	ld	r26, Y
   e:	b9 81       	ldd	r27, Y+1	; 0x01
  10:	30 97       	sbiw	r30, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6String9compareToERKS_+0x14>
  14:	10 97       	sbiw	r26, 0x00	; 0
  16:	01 f4       	brne	.+0      	; 0x18 <_ZNK6String9compareToERKS_+0x18>
  18:	10 97       	sbiw	r26, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
  1c:	eb 01       	movw	r28, r22
  1e:	2c 81       	ldd	r18, Y+4	; 0x04
  20:	3d 81       	ldd	r19, Y+5	; 0x05
  22:	23 2b       	or	r18, r19
  24:	01 f0       	breq	.+0      	; 0x26 <_ZNK6String9compareToERKS_+0x26>
  26:	8c 91       	ld	r24, X
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	91 95       	neg	r25
  2c:	81 95       	neg	r24
  2e:	91 09       	sbc	r25, r1
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZNK6String9compareToERKS_+0x32>
  32:	30 97       	sbiw	r30, 0x00	; 0
  34:	01 f0       	breq	.+0      	; 0x36 <_ZNK6String9compareToERKS_+0x36>
  36:	dc 01       	movw	r26, r24
  38:	14 96       	adiw	r26, 0x04	; 4
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	15 97       	sbiw	r26, 0x05	; 5
  40:	89 2b       	or	r24, r25
  42:	01 f0       	breq	.+0      	; 0x44 <_ZNK6String9compareToERKS_+0x44>
  44:	80 81       	ld	r24, Z
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZNK6String9compareToERKS_+0x4a>
  4a:	bd 01       	movw	r22, r26
  4c:	cf 01       	movw	r24, r30
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String9compareToERKS_>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	df 91       	pop	r29
  5c:	cf 91       	pop	r28
  5e:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	01 f4       	brne	.+0      	; 0x12 <_ZNK6String6equalsERKS_+0x12>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  16:	21 e0       	ldi	r18, 0x01	; 1
  18:	89 2b       	or	r24, r25
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String6equalsERKS_+0x1c>
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	82 2f       	mov	r24, r18
  20:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	23 2b       	or	r18, r19
   8:	01 f4       	brne	.+0      	; 0xa <_ZNK6String6equalsEPKc+0xa>
   a:	21 e0       	ldi	r18, 0x01	; 1
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String6equalsEPKc+0x12>
  12:	fb 01       	movw	r30, r22
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	fc 01       	movw	r30, r24
  18:	80 81       	ld	r24, Z
  1a:	91 81       	ldd	r25, Z+1	; 0x01
  1c:	61 15       	cp	r22, r1
  1e:	71 05       	cpc	r23, r1
  20:	01 f4       	brne	.+0      	; 0x22 <_ZNK6String6equalsEPKc+0x22>
  22:	21 e0       	ldi	r18, 0x01	; 1
  24:	fc 01       	movw	r30, r24
  26:	80 81       	ld	r24, Z
  28:	88 23       	and	r24, r24
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String6equalsEPKc+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZNK6String6equalsEPKc+0x2e>
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	89 2b       	or	r24, r25
  36:	01 f0       	breq	.+0      	; 0x38 <_ZNK6String6equalsEPKc+0x38>
  38:	20 e0       	ldi	r18, 0x00	; 0
  3a:	82 2f       	mov	r24, r18
  3c:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
   8:	88 1f       	adc	r24, r24
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
   e:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	86 17       	cp	r24, r22
   e:	97 07       	cpc	r25, r23
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String16equalsIgnoreCaseERKS_+0x12>
  12:	fc 01       	movw	r30, r24
  14:	24 81       	ldd	r18, Z+4	; 0x04
  16:	35 81       	ldd	r19, Z+5	; 0x05
  18:	fb 01       	movw	r30, r22
  1a:	44 81       	ldd	r20, Z+4	; 0x04
  1c:	55 81       	ldd	r21, Z+5	; 0x05
  1e:	24 17       	cp	r18, r20
  20:	35 07       	cpc	r19, r21
  22:	01 f4       	brne	.+0      	; 0x24 <_ZNK6String16equalsIgnoreCaseERKS_+0x24>
  24:	23 2b       	or	r18, r19
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
  28:	dc 01       	movw	r26, r24
  2a:	cd 91       	ld	r28, X+
  2c:	dc 91       	ld	r29, X
  2e:	00 81       	ld	r16, Z
  30:	11 81       	ldd	r17, Z+1	; 0x01
  32:	89 91       	ld	r24, Y+
  34:	88 23       	and	r24, r24
  36:	01 f0       	breq	.+0      	; 0x38 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
  38:	08 2e       	mov	r0, r24
  3a:	00 0c       	add	r0, r0
  3c:	99 0b       	sbc	r25, r25
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  42:	7c 01       	movw	r14, r24
  44:	f8 01       	movw	r30, r16
  46:	81 91       	ld	r24, Z+
  48:	8f 01       	movw	r16, r30
  4a:	08 2e       	mov	r0, r24
  4c:	00 0c       	add	r0, r0
  4e:	99 0b       	sbc	r25, r25
  50:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  54:	e8 16       	cp	r14, r24
  56:	f9 06       	cpc	r15, r25
  58:	01 f0       	breq	.+0      	; 0x5a <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
  60:	80 e0       	ldi	r24, 0x00	; 0
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	1f 91       	pop	r17
  68:	0f 91       	pop	r16
  6a:	ff 90       	pop	r15
  6c:	ef 90       	pop	r14
  6e:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
   0:	db 01       	movw	r26, r22
   2:	14 96       	adiw	r26, 0x04	; 4
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	15 97       	sbiw	r26, 0x05	; 5
   a:	dc 01       	movw	r26, r24
   c:	14 96       	adiw	r26, 0x04	; 4
   e:	2d 91       	ld	r18, X+
  10:	3c 91       	ld	r19, X
  12:	15 97       	sbiw	r26, 0x05	; 5
  14:	2e 1b       	sub	r18, r30
  16:	3f 0b       	sbc	r19, r31
  18:	24 17       	cp	r18, r20
  1a:	35 07       	cpc	r19, r21
  1c:	00 f0       	brcs	.+0      	; 0x1e <_ZNK6String10startsWithERKS_j+0x1e>
  1e:	2d 91       	ld	r18, X+
  20:	3c 91       	ld	r19, X
  22:	21 15       	cp	r18, r1
  24:	31 05       	cpc	r19, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String10startsWithERKS_j+0x28>
  28:	db 01       	movw	r26, r22
  2a:	6d 91       	ld	r22, X+
  2c:	7c 91       	ld	r23, X
  2e:	61 15       	cp	r22, r1
  30:	71 05       	cpc	r23, r1
  32:	01 f0       	breq	.+0      	; 0x34 <_ZNK6String10startsWithERKS_j+0x34>
  34:	ca 01       	movw	r24, r20
  36:	af 01       	movw	r20, r30
  38:	82 0f       	add	r24, r18
  3a:	93 1f       	adc	r25, r19
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	89 2b       	or	r24, r25
  44:	01 f0       	breq	.+0      	; 0x46 <_ZNK6String10startsWithERKS_j+0x46>
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	82 2f       	mov	r24, r18
  4a:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	00 f0       	brcs	.+0      	; 0x12 <_ZNK6String10startsWithERKS_+0x12>
  12:	40 e0       	ldi	r20, 0x00	; 0
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String10startsWithERKS_>
  1a:	80 e0       	ldi	r24, 0x00	; 0
  1c:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	44 81       	ldd	r20, Z+4	; 0x04
   a:	55 81       	ldd	r21, Z+5	; 0x05
   c:	24 17       	cp	r18, r20
   e:	35 07       	cpc	r19, r21
  10:	00 f0       	brcs	.+0      	; 0x12 <_ZNK6String8endsWithERKS_+0x12>
  12:	fc 01       	movw	r30, r24
  14:	80 81       	ld	r24, Z
  16:	91 81       	ldd	r25, Z+1	; 0x01
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String8endsWithERKS_+0x1c>
  1c:	fb 01       	movw	r30, r22
  1e:	60 81       	ld	r22, Z
  20:	71 81       	ldd	r23, Z+1	; 0x01
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String8endsWithERKS_+0x28>
  28:	24 1b       	sub	r18, r20
  2a:	35 0b       	sbc	r19, r21
  2c:	82 0f       	add	r24, r18
  2e:	93 1f       	adc	r25, r19
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	89 2b       	or	r24, r25
  38:	01 f0       	breq	.+0      	; 0x3a <_ZNK6String8endsWithERKS_+0x3a>
  3a:	20 e0       	ldi	r18, 0x00	; 0
  3c:	82 2f       	mov	r24, r18
  3e:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	62 17       	cp	r22, r18
   8:	73 07       	cpc	r23, r19
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6String9setCharAtEjc+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	fc 01       	movw	r30, r24
  12:	e6 0f       	add	r30, r22
  14:	f7 1f       	adc	r31, r23
  16:	40 83       	st	Z, r20
  18:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	62 17       	cp	r22, r18
   8:	73 07       	cpc	r23, r19
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringixEj+0x14>
  14:	10 92 00 00 	sts	0x0000, r1	; 0x800000 <__SREG__+0x7fffc1>
  18:	80 e0       	ldi	r24, 0x00	; 0
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	08 95       	ret
  1e:	86 0f       	add	r24, r22
  20:	97 1f       	adc	r25, r23
  22:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	62 17       	cp	r22, r18
   8:	73 07       	cpc	r23, r19
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6StringixEj+0x14>
  14:	fc 01       	movw	r30, r24
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String6charAtEj>

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	41 15       	cp	r20, r1
   a:	51 05       	cpc	r21, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZNK6String8getBytesEPhjj+0xe>
   e:	61 15       	cp	r22, r1
  10:	71 05       	cpc	r23, r1
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6String8getBytesEPhjj+0x14>
  14:	dc 01       	movw	r26, r24
  16:	14 96       	adiw	r26, 0x04	; 4
  18:	ed 91       	ld	r30, X+
  1a:	fc 91       	ld	r31, X
  1c:	15 97       	sbiw	r26, 0x05	; 5
  1e:	2e 17       	cp	r18, r30
  20:	3f 07       	cpc	r19, r31
  22:	00 f0       	brcs	.+0      	; 0x24 <_ZNK6String8getBytesEPhjj+0x24>
  24:	fb 01       	movw	r30, r22
  26:	10 82       	st	Z, r1
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZNK6String8getBytesEPhjj+0x2a>
  2a:	e2 1b       	sub	r30, r18
  2c:	f3 0b       	sbc	r31, r19
  2e:	ea 01       	movw	r28, r20
  30:	21 97       	sbiw	r28, 0x01	; 1
  32:	ec 17       	cp	r30, r28
  34:	fd 07       	cpc	r31, r29
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZNK6String8getBytesEPhjj+0x38>
  38:	ef 01       	movw	r28, r30
  3a:	8b 01       	movw	r16, r22
  3c:	fc 01       	movw	r30, r24
  3e:	60 81       	ld	r22, Z
  40:	71 81       	ldd	r23, Z+1	; 0x01
  42:	62 0f       	add	r22, r18
  44:	73 1f       	adc	r23, r19
  46:	ae 01       	movw	r20, r28
  48:	c8 01       	movw	r24, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
  4e:	c0 0f       	add	r28, r16
  50:	d1 1f       	adc	r29, r17
  52:	18 82       	st	Y, r1
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	24 81       	ldd	r18, Z+4	; 0x04
   8:	35 81       	ldd	r19, Z+5	; 0x05
   a:	42 17       	cp	r20, r18
   c:	53 07       	cpc	r21, r19
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfEcj+0x10>
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	06 2e       	mov	r0, r22
  16:	00 0c       	add	r0, r0
  18:	77 0b       	sbc	r23, r23
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfEcj+0x28>
  28:	8c 1b       	sub	r24, r28
  2a:	9d 0b       	sbc	r25, r29
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZNK6String7indexOfEcj+0x2e>
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	9f ef       	ldi	r25, 0xFF	; 255
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String7indexOfEc>

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	24 81       	ldd	r18, Z+4	; 0x04
   8:	35 81       	ldd	r19, Z+5	; 0x05
   a:	42 17       	cp	r20, r18
   c:	53 07       	cpc	r21, r19
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfERKS_j+0x10>
  10:	fb 01       	movw	r30, r22
  12:	dc 01       	movw	r26, r24
  14:	cd 91       	ld	r28, X+
  16:	dc 91       	ld	r29, X
  18:	60 81       	ld	r22, Z
  1a:	71 81       	ldd	r23, Z+1	; 0x01
  1c:	ce 01       	movw	r24, r28
  1e:	84 0f       	add	r24, r20
  20:	95 1f       	adc	r25, r21
  22:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String7indexOfERKS_j+0x2a>
  2a:	8c 1b       	sub	r24, r28
  2c:	9d 0b       	sbc	r25, r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfERKS_j+0x30>
  30:	8f ef       	ldi	r24, 0xFF	; 255
  32:	9f ef       	ldi	r25, 0xFF	; 255
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String7indexOfERKS_>

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	dc 01       	movw	r26, r24
  10:	14 96       	adiw	r26, 0x04	; 4
  12:	2d 91       	ld	r18, X+
  14:	3c 91       	ld	r19, X
  16:	15 97       	sbiw	r26, 0x05	; 5
  18:	42 17       	cp	r20, r18
  1a:	53 07       	cpc	r21, r19
  1c:	00 f0       	brcs	.+0      	; 0x1e <_ZNK6String11lastIndexOfEcj+0x1e>
  1e:	8f ef       	ldi	r24, 0xFF	; 255
  20:	9f ef       	ldi	r25, 0xFF	; 255
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZNK6String11lastIndexOfEcj+0x24>
  24:	8c 01       	movw	r16, r24
  26:	ea 01       	movw	r28, r20
  28:	21 96       	adiw	r28, 0x01	; 1
  2a:	dc 01       	movw	r26, r24
  2c:	ed 91       	ld	r30, X+
  2e:	fc 91       	ld	r31, X
  30:	11 97       	sbiw	r26, 0x01	; 1
  32:	ec 0f       	add	r30, r28
  34:	fd 1f       	adc	r31, r29
  36:	d0 80       	ld	r13, Z
  38:	10 82       	st	Z, r1
  3a:	ed 90       	ld	r14, X+
  3c:	fc 90       	ld	r15, X
  3e:	06 2e       	mov	r0, r22
  40:	00 0c       	add	r0, r0
  42:	77 0b       	sbc	r23, r23
  44:	c7 01       	movw	r24, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  4a:	ce 0d       	add	r28, r14
  4c:	df 1d       	adc	r29, r15
  4e:	d8 82       	st	Y, r13
  50:	00 97       	sbiw	r24, 0x00	; 0
  52:	01 f0       	breq	.+0      	; 0x54 <_ZNK6String11lastIndexOfEcj+0x54>
  54:	f8 01       	movw	r30, r16
  56:	20 81       	ld	r18, Z
  58:	31 81       	ldd	r19, Z+1	; 0x01
  5a:	82 1b       	sub	r24, r18
  5c:	93 0b       	sbc	r25, r19
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	51 09       	sbc	r21, r1
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String11lastIndexOfEc>

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	7b 01       	movw	r14, r22
  16:	8a 01       	movw	r16, r20
  18:	fb 01       	movw	r30, r22
  1a:	44 81       	ldd	r20, Z+4	; 0x04
  1c:	55 81       	ldd	r21, Z+5	; 0x05
  1e:	41 15       	cp	r20, r1
  20:	51 05       	cpc	r21, r1
  22:	01 f0       	breq	.+0      	; 0x24 <_ZNK6String11lastIndexOfERKS_j+0x24>
  24:	fc 01       	movw	r30, r24
  26:	24 81       	ldd	r18, Z+4	; 0x04
  28:	35 81       	ldd	r19, Z+5	; 0x05
  2a:	21 15       	cp	r18, r1
  2c:	31 05       	cpc	r19, r1
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZNK6String11lastIndexOfERKS_j+0x30>
  30:	24 17       	cp	r18, r20
  32:	35 07       	cpc	r19, r21
  34:	00 f0       	brcs	.+0      	; 0x36 <_ZNK6String11lastIndexOfERKS_j+0x36>
  36:	02 17       	cp	r16, r18
  38:	13 07       	cpc	r17, r19
  3a:	00 f0       	brcs	.+0      	; 0x3c <_ZNK6String11lastIndexOfERKS_j+0x3c>
  3c:	89 01       	movw	r16, r18
  3e:	01 50       	subi	r16, 0x01	; 1
  40:	11 09       	sbc	r17, r1
  42:	fc 01       	movw	r30, r24
  44:	a0 80       	ld	r10, Z
  46:	b1 80       	ldd	r11, Z+1	; 0x01
  48:	c5 01       	movw	r24, r10
  4a:	df ef       	ldi	r29, 0xFF	; 255
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	65 01       	movw	r12, r10
  50:	c0 0e       	add	r12, r16
  52:	d1 1e       	adc	r13, r17
  54:	c8 16       	cp	r12, r24
  56:	d9 06       	cpc	r13, r25
  58:	00 f0       	brcs	.+0      	; 0x5a <_ZNK6String11lastIndexOfERKS_j+0x5a>
  5a:	f7 01       	movw	r30, r14
  5c:	60 81       	ld	r22, Z
  5e:	71 81       	ldd	r23, Z+1	; 0x01
  60:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  64:	00 97       	sbiw	r24, 0x00	; 0
  66:	01 f0       	breq	.+0      	; 0x68 <_ZNK6String11lastIndexOfERKS_j+0x68>
  68:	9c 01       	movw	r18, r24
  6a:	2a 19       	sub	r18, r10
  6c:	3b 09       	sbc	r19, r11
  6e:	02 17       	cp	r16, r18
  70:	13 07       	cpc	r17, r19
  72:	00 f0       	brcs	.+0      	; 0x74 <_ZNK6String11lastIndexOfERKS_j+0x74>
  74:	d2 2f       	mov	r29, r18
  76:	c3 2f       	mov	r28, r19
  78:	01 96       	adiw	r24, 0x01	; 1
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZNK6String11lastIndexOfERKS_j+0x7c>
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZNK6String11lastIndexOfERKS_j+0x82>
  82:	8d 2f       	mov	r24, r29
  84:	9c 2f       	mov	r25, r28
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 1b       	sub	r20, r18
   e:	53 0b       	sbc	r21, r19
  10:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	7c 01       	movw	r14, r24
  14:	6b 01       	movw	r12, r22
  16:	8a 01       	movw	r16, r20
  18:	e9 01       	movw	r28, r18
  1a:	24 17       	cp	r18, r20
  1c:	35 07       	cpc	r19, r21
  1e:	00 f4       	brcc	.+0      	; 0x20 <_ZNK6String9substringEjj+0x20>
  20:	81 2f       	mov	r24, r17
  22:	89 01       	movw	r16, r18
  24:	c4 2f       	mov	r28, r20
  26:	d8 2f       	mov	r29, r24
  28:	60 e0       	ldi	r22, 0x00	; 0
  2a:	70 e0       	ldi	r23, 0x00	; 0
  2c:	c7 01       	movw	r24, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  32:	d6 01       	movw	r26, r12
  34:	14 96       	adiw	r26, 0x04	; 4
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	15 97       	sbiw	r26, 0x05	; 5
  3c:	08 17       	cp	r16, r24
  3e:	19 07       	cpc	r17, r25
  40:	00 f4       	brcc	.+0      	; 0x42 <_ZNK6String9substringEjj+0x42>
  42:	8c 17       	cp	r24, r28
  44:	9d 07       	cpc	r25, r29
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZNK6String9substringEjj+0x48>
  48:	ec 01       	movw	r28, r24
  4a:	d6 01       	movw	r26, r12
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	ec 0f       	add	r30, r28
  54:	fd 1f       	adc	r31, r29
  56:	b0 80       	ld	r11, Z
  58:	10 82       	st	Z, r1
  5a:	4d 91       	ld	r20, X+
  5c:	5c 91       	ld	r21, X
  5e:	ba 01       	movw	r22, r20
  60:	60 0f       	add	r22, r16
  62:	71 1f       	adc	r23, r17
  64:	c7 01       	movw	r24, r14
  66:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  6a:	d6 01       	movw	r26, r12
  6c:	ed 91       	ld	r30, X+
  6e:	fc 91       	ld	r31, X
  70:	ec 0f       	add	r30, r28
  72:	fd 1f       	adc	r31, r29
  74:	b0 82       	st	Z, r11
  76:	c7 01       	movw	r24, r14
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	ff 90       	pop	r15
  82:	ef 90       	pop	r14
  84:	df 90       	pop	r13
  86:	cf 90       	pop	r12
  88:	bf 90       	pop	r11
  8a:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	30 97       	sbiw	r30, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZN6String7replaceEcc+0xa>
   a:	08 95       	ret
   c:	86 13       	cpse	r24, r22
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String7replaceEcc+0x10>
  10:	40 83       	st	Z, r20
  12:	31 96       	adiw	r30, 0x01	; 1
  14:	80 81       	ld	r24, Z
  16:	81 11       	cpse	r24, r1
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN6String7replaceEcc+0x1a>
  1a:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	fc 01       	movw	r30, r24
  26:	44 80       	ldd	r4, Z+4	; 0x04
  28:	55 80       	ldd	r5, Z+5	; 0x05
  2a:	41 14       	cp	r4, r1
  2c:	51 04       	cpc	r5, r1
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN6String7replaceERKS_S1_+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6String7replaceERKS_S1_+0x32>
  32:	fb 01       	movw	r30, r22
  34:	64 80       	ldd	r6, Z+4	; 0x04
  36:	75 80       	ldd	r7, Z+5	; 0x05
  38:	61 14       	cp	r6, r1
  3a:	71 04       	cpc	r7, r1
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN6String7replaceERKS_S1_+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6String7replaceERKS_S1_+0x40>
  40:	7a 01       	movw	r14, r20
  42:	6b 01       	movw	r12, r22
  44:	8c 01       	movw	r16, r24
  46:	fa 01       	movw	r30, r20
  48:	a4 80       	ldd	r10, Z+4	; 0x04
  4a:	b5 80       	ldd	r11, Z+5	; 0x05
  4c:	a6 18       	sub	r10, r6
  4e:	b7 08       	sbc	r11, r7
  50:	fc 01       	movw	r30, r24
  52:	c0 81       	ld	r28, Z
  54:	d1 81       	ldd	r29, Z+1	; 0x01
  56:	a1 14       	cp	r10, r1
  58:	b1 04       	cpc	r11, r1
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6String7replaceERKS_S1_+0x5c>
  5c:	f6 01       	movw	r30, r12
  5e:	60 81       	ld	r22, Z
  60:	71 81       	ldd	r23, Z+1	; 0x01
  62:	ce 01       	movw	r24, r28
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  68:	ec 01       	movw	r28, r24
  6a:	89 2b       	or	r24, r25
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN6String7replaceERKS_S1_+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN6String7replaceERKS_S1_+0x70>
  70:	f7 01       	movw	r30, r14
  72:	60 81       	ld	r22, Z
  74:	71 81       	ldd	r23, Z+1	; 0x01
  76:	44 81       	ldd	r20, Z+4	; 0x04
  78:	55 81       	ldd	r21, Z+5	; 0x05
  7a:	ce 01       	movw	r24, r28
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  80:	f7 01       	movw	r30, r14
  82:	84 81       	ldd	r24, Z+4	; 0x04
  84:	95 81       	ldd	r25, Z+5	; 0x05
  86:	c8 0f       	add	r28, r24
  88:	d9 1f       	adc	r29, r25
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN6String7replaceERKS_S1_+0x8c>
  8c:	b7 fe       	sbrs	r11, 7
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_ZN6String7replaceERKS_S1_+0x90>
  90:	4e 01       	movw	r8, r28
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN6String7replaceERKS_S1_+0x94>
  94:	fb 01       	movw	r30, r22
  96:	20 80       	ld	r2, Z
  98:	31 80       	ldd	r3, Z+1	; 0x01
  9a:	42 01       	movw	r8, r4
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN6String7replaceERKS_S1_+0x9e>
  9e:	f6 01       	movw	r30, r12
  a0:	60 81       	ld	r22, Z
  a2:	71 81       	ldd	r23, Z+1	; 0x01
  a4:	c4 01       	movw	r24, r8
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  aa:	2c 01       	movw	r4, r24
  ac:	89 2b       	or	r24, r25
  ae:	01 f0       	breq	.+0      	; 0xb0 <_ZN6String7replaceERKS_S1_+0xb0>
  b0:	32 01       	movw	r6, r4
  b2:	68 18       	sub	r6, r8
  b4:	79 08       	sbc	r7, r9
  b6:	a3 01       	movw	r20, r6
  b8:	b4 01       	movw	r22, r8
  ba:	ce 01       	movw	r24, r28
  bc:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  c0:	c6 0d       	add	r28, r6
  c2:	d7 1d       	adc	r29, r7
  c4:	f7 01       	movw	r30, r14
  c6:	60 81       	ld	r22, Z
  c8:	71 81       	ldd	r23, Z+1	; 0x01
  ca:	44 81       	ldd	r20, Z+4	; 0x04
  cc:	55 81       	ldd	r21, Z+5	; 0x05
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  d4:	f7 01       	movw	r30, r14
  d6:	84 81       	ldd	r24, Z+4	; 0x04
  d8:	95 81       	ldd	r25, Z+5	; 0x05
  da:	c8 0f       	add	r28, r24
  dc:	d9 1f       	adc	r29, r25
  de:	f6 01       	movw	r30, r12
  e0:	84 80       	ldd	r8, Z+4	; 0x04
  e2:	95 80       	ldd	r9, Z+5	; 0x05
  e4:	84 0c       	add	r8, r4
  e6:	95 1c       	adc	r9, r5
  e8:	f8 01       	movw	r30, r16
  ea:	84 81       	ldd	r24, Z+4	; 0x04
  ec:	95 81       	ldd	r25, Z+5	; 0x05
  ee:	8a 0d       	add	r24, r10
  f0:	9b 1d       	adc	r25, r11
  f2:	95 83       	std	Z+5, r25	; 0x05
  f4:	84 83       	std	Z+4, r24	; 0x04
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN6String7replaceERKS_S1_+0xf8>
  f8:	b4 01       	movw	r22, r8
  fa:	ce 01       	movw	r24, r28
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	1f 91       	pop	r17
 102:	0f 91       	pop	r16
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	df 90       	pop	r13
 10a:	cf 90       	pop	r12
 10c:	bf 90       	pop	r11
 10e:	af 90       	pop	r10
 110:	9f 90       	pop	r9
 112:	8f 90       	pop	r8
 114:	7f 90       	pop	r7
 116:	6f 90       	pop	r6
 118:	5f 90       	pop	r5
 11a:	4f 90       	pop	r4
 11c:	3f 90       	pop	r3
 11e:	2f 90       	pop	r2
 120:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 124:	b1 01       	movw	r22, r2
 126:	ce 01       	movw	r24, r28
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	01 f0       	breq	.+0      	; 0x130 <_ZN6String7replaceERKS_S1_+0x130>
 130:	ec 01       	movw	r28, r24
 132:	c6 0d       	add	r28, r6
 134:	d7 1d       	adc	r29, r7
 136:	8a 0c       	add	r8, r10
 138:	9b 1c       	adc	r9, r11
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN6String7replaceERKS_S1_+0x13c>
 13c:	84 14       	cp	r8, r4
 13e:	95 04       	cpc	r9, r5
 140:	01 f4       	brne	.+0      	; 0x142 <_ZN6String7replaceERKS_S1_+0x142>
 142:	00 c0       	rjmp	.+0      	; 0x144 <_ZN6String7replaceERKS_S1_+0x144>
 144:	f8 01       	movw	r30, r16
 146:	82 81       	ldd	r24, Z+2	; 0x02
 148:	93 81       	ldd	r25, Z+3	; 0x03
 14a:	88 15       	cp	r24, r8
 14c:	99 05       	cpc	r25, r9
 14e:	00 f4       	brcc	.+0      	; 0x150 <_ZN6String7replaceERKS_S1_+0x150>
 150:	b4 01       	movw	r22, r8
 152:	c8 01       	movw	r24, r16
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 158:	88 23       	and	r24, r24
 15a:	01 f0       	breq	.+0      	; 0x15c <_ZN6String7replaceERKS_S1_+0x15c>
 15c:	f8 01       	movw	r30, r16
 15e:	44 81       	ldd	r20, Z+4	; 0x04
 160:	55 81       	ldd	r21, Z+5	; 0x05
 162:	41 50       	subi	r20, 0x01	; 1
 164:	51 09       	sbc	r21, r1
 166:	57 fd       	sbrc	r21, 7
 168:	00 c0       	rjmp	.+0      	; 0x16a <_ZN6String7replaceERKS_S1_+0x16a>
 16a:	b6 01       	movw	r22, r12
 16c:	c8 01       	movw	r24, r16
 16e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 172:	ec 01       	movw	r28, r24
 174:	97 fd       	sbrc	r25, 7
 176:	00 c0       	rjmp	.+0      	; 0x178 <_ZN6String7replaceERKS_S1_+0x178>
 178:	f8 01       	movw	r30, r16
 17a:	80 81       	ld	r24, Z
 17c:	91 81       	ldd	r25, Z+1	; 0x01
 17e:	f6 01       	movw	r30, r12
 180:	24 81       	ldd	r18, Z+4	; 0x04
 182:	35 81       	ldd	r19, Z+5	; 0x05
 184:	2c 0f       	add	r18, r28
 186:	3d 1f       	adc	r19, r29
 188:	82 0f       	add	r24, r18
 18a:	93 1f       	adc	r25, r19
 18c:	f8 01       	movw	r30, r16
 18e:	44 81       	ldd	r20, Z+4	; 0x04
 190:	55 81       	ldd	r21, Z+5	; 0x05
 192:	42 1b       	sub	r20, r18
 194:	53 0b       	sbc	r21, r19
 196:	bc 01       	movw	r22, r24
 198:	8a 0d       	add	r24, r10
 19a:	9b 1d       	adc	r25, r11
 19c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1a0:	f8 01       	movw	r30, r16
 1a2:	84 81       	ldd	r24, Z+4	; 0x04
 1a4:	95 81       	ldd	r25, Z+5	; 0x05
 1a6:	8a 0d       	add	r24, r10
 1a8:	9b 1d       	adc	r25, r11
 1aa:	95 83       	std	Z+5, r25	; 0x05
 1ac:	84 83       	std	Z+4, r24	; 0x04
 1ae:	20 81       	ld	r18, Z
 1b0:	31 81       	ldd	r19, Z+1	; 0x01
 1b2:	f9 01       	movw	r30, r18
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	10 82       	st	Z, r1
 1ba:	f8 01       	movw	r30, r16
 1bc:	80 81       	ld	r24, Z
 1be:	91 81       	ldd	r25, Z+1	; 0x01
 1c0:	f7 01       	movw	r30, r14
 1c2:	60 81       	ld	r22, Z
 1c4:	71 81       	ldd	r23, Z+1	; 0x01
 1c6:	44 81       	ldd	r20, Z+4	; 0x04
 1c8:	55 81       	ldd	r21, Z+5	; 0x05
 1ca:	8c 0f       	add	r24, r28
 1cc:	9d 1f       	adc	r25, r29
 1ce:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1d2:	ae 01       	movw	r20, r28
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN6String7replaceERKS_S1_+0x1d6>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	ff 90       	pop	r15
 1e0:	ef 90       	pop	r14
 1e2:	df 90       	pop	r13
 1e4:	cf 90       	pop	r12
 1e6:	bf 90       	pop	r11
 1e8:	af 90       	pop	r10
 1ea:	9f 90       	pop	r9
 1ec:	8f 90       	pop	r8
 1ee:	7f 90       	pop	r7
 1f0:	6f 90       	pop	r6
 1f2:	5f 90       	pop	r5
 1f4:	4f 90       	pop	r4
 1f6:	3f 90       	pop	r3
 1f8:	2f 90       	pop	r2
 1fa:	08 95       	ret

Disassembly of section .text._ZN6String6removeEjj:

00000000 <_ZN6String6removeEjj>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	14 96       	adiw	r26, 0x04	; 4
   8:	ed 91       	ld	r30, X+
   a:	fc 91       	ld	r31, X
   c:	15 97       	sbiw	r26, 0x05	; 5
   e:	6e 17       	cp	r22, r30
  10:	7f 07       	cpc	r23, r31
  12:	00 f4       	brcc	.+0      	; 0x14 <_ZN6String6removeEjj+0x14>
  14:	41 15       	cp	r20, r1
  16:	51 05       	cpc	r21, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6String6removeEjj+0x1a>
  1a:	9f 01       	movw	r18, r30
  1c:	26 1b       	sub	r18, r22
  1e:	37 0b       	sbc	r19, r23
  20:	42 17       	cp	r20, r18
  22:	53 07       	cpc	r21, r19
  24:	00 f4       	brcc	.+0      	; 0x26 <_ZN6String6removeEjj+0x26>
  26:	9a 01       	movw	r18, r20
  28:	db 01       	movw	r26, r22
  2a:	ec 01       	movw	r28, r24
  2c:	88 81       	ld	r24, Y
  2e:	99 81       	ldd	r25, Y+1	; 0x01
  30:	e2 1b       	sub	r30, r18
  32:	f3 0b       	sbc	r31, r19
  34:	fd 83       	std	Y+5, r31	; 0x05
  36:	ec 83       	std	Y+4, r30	; 0x04
  38:	af 01       	movw	r20, r30
  3a:	46 1b       	sub	r20, r22
  3c:	57 0b       	sbc	r21, r23
  3e:	26 0f       	add	r18, r22
  40:	37 1f       	adc	r19, r23
  42:	bc 01       	movw	r22, r24
  44:	62 0f       	add	r22, r18
  46:	73 1f       	adc	r23, r19
  48:	8a 0f       	add	r24, r26
  4a:	9b 1f       	adc	r25, r27
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6removeEjj>
  50:	e8 81       	ld	r30, Y
  52:	f9 81       	ldd	r31, Y+1	; 0x01
  54:	8c 81       	ldd	r24, Y+4	; 0x04
  56:	9d 81       	ldd	r25, Y+5	; 0x05
  58:	e8 0f       	add	r30, r24
  5a:	f9 1f       	adc	r31, r25
  5c:	10 82       	st	Z, r1
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	08 95       	ret

Disassembly of section .text._ZN6String6removeEj:

00000000 <_ZN6String6removeEj>:
   0:	4f ef       	ldi	r20, 0xFF	; 255
   2:	5f ef       	ldi	r21, 0xFF	; 255
   4:	0c 94 00 00 	jmp	0	; 0x0 <_ZN6String6removeEj>

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
   e:	88 81       	ld	r24, Y
  10:	88 23       	and	r24, r24
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN6String11toLowerCaseEv+0x14>
  14:	08 2e       	mov	r0, r24
  16:	00 0c       	add	r0, r0
  18:	99 0b       	sbc	r25, r25
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
  1e:	89 93       	st	Y+, r24
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
   e:	88 81       	ld	r24, Y
  10:	88 23       	and	r24, r24
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN6String11toUpperCaseEv+0x14>
  14:	08 2e       	mov	r0, r24
  16:	00 0c       	add	r0, r0
  18:	99 0b       	sbc	r25, r25
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
  1e:	89 93       	st	Y+, r24
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	dc 01       	movw	r26, r24
  16:	cd 90       	ld	r12, X+
  18:	dc 90       	ld	r13, X
  1a:	11 97       	sbiw	r26, 0x01	; 1
  1c:	c1 14       	cp	r12, r1
  1e:	d1 04       	cpc	r13, r1
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String4trimEv+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4trimEv+0x24>
  24:	14 96       	adiw	r26, 0x04	; 4
  26:	cd 91       	ld	r28, X+
  28:	dc 91       	ld	r29, X
  2a:	15 97       	sbiw	r26, 0x05	; 5
  2c:	20 97       	sbiw	r28, 0x00	; 0
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6String4trimEv+0x30>
  30:	8c 01       	movw	r16, r24
  32:	56 01       	movw	r10, r12
  34:	75 01       	movw	r14, r10
  36:	bf ef       	ldi	r27, 0xFF	; 255
  38:	ab 1a       	sub	r10, r27
  3a:	bb 0a       	sbc	r11, r27
  3c:	f7 01       	movw	r30, r14
  3e:	80 81       	ld	r24, Z
  40:	08 2e       	mov	r0, r24
  42:	00 0c       	add	r0, r0
  44:	99 0b       	sbc	r25, r25
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  4a:	89 2b       	or	r24, r25
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZN6String4trimEv+0x4e>
  4e:	21 97       	sbiw	r28, 0x01	; 1
  50:	cc 0d       	add	r28, r12
  52:	dd 1d       	adc	r29, r13
  54:	88 81       	ld	r24, Y
  56:	08 2e       	mov	r0, r24
  58:	00 0c       	add	r0, r0
  5a:	99 0b       	sbc	r25, r25
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  60:	89 2b       	or	r24, r25
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6String4trimEv+0x64>
  64:	ae 01       	movw	r20, r28
  66:	4f 5f       	subi	r20, 0xFF	; 255
  68:	5f 4f       	sbci	r21, 0xFF	; 255
  6a:	4e 19       	sub	r20, r14
  6c:	5f 09       	sbc	r21, r15
  6e:	d8 01       	movw	r26, r16
  70:	15 96       	adiw	r26, 0x05	; 5
  72:	5c 93       	st	X, r21
  74:	4e 93       	st	-X, r20
  76:	14 97       	sbiw	r26, 0x04	; 4
  78:	ce 14       	cp	r12, r14
  7a:	df 04       	cpc	r13, r15
  7c:	00 f4       	brcc	.+0      	; 0x7e <_ZN6String4trimEv+0x7e>
  7e:	b7 01       	movw	r22, r14
  80:	c6 01       	movw	r24, r12
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN6String4trimEv+0x88>
  88:	ce 15       	cp	r28, r14
  8a:	df 05       	cpc	r29, r15
  8c:	00 f0       	brcs	.+0      	; 0x8e <_ZN6String4trimEv+0x8e>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN6String4trimEv+0x92>
  92:	d8 01       	movw	r26, r16
  94:	ed 91       	ld	r30, X+
  96:	fc 91       	ld	r31, X
  98:	11 97       	sbiw	r26, 0x01	; 1
  9a:	14 96       	adiw	r26, 0x04	; 4
  9c:	8d 91       	ld	r24, X+
  9e:	9c 91       	ld	r25, X
  a0:	15 97       	sbiw	r26, 0x05	; 5
  a2:	e8 0f       	add	r30, r24
  a4:	f9 1f       	adc	r31, r25
  a6:	10 82       	st	Z, r1
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String5toIntEv>
   e:	60 e0       	ldi	r22, 0x00	; 0
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	cb 01       	movw	r24, r22
  14:	08 95       	ret

Disassembly of section .text._ZNK6String8toDoubleEv:

00000000 <_ZNK6String8toDoubleEv>:
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZNK6String8toDoubleEv+0xa>
   a:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String8toDoubleEv>
   e:	60 e0       	ldi	r22, 0x00	; 0
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	cb 01       	movw	r24, r22
  14:	08 95       	ret

Disassembly of section .text._ZNK6String7toFloatEv:

00000000 <_ZNK6String7toFloatEv>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZNK6String7toFloatEv>

abi.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000003a8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000009df  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__cxa_pure_virtual 00000004  00000000  00000000  00000dbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.__cxa_deleted_virtual 00000004  00000000  00000000  00000dbf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000012  00000000  00000000  00000dc3  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:
extern "C" void __cxa_deleted_virtual(void) __attribute__ ((__noreturn__));

void __cxa_pure_virtual(void) {
  // We might want to write some diagnostics to uart in this case
  //std::terminate();
  abort();
   0:	0e 94 00 00 	call	0	; 0x0 <__cxa_pure_virtual>

Disassembly of section .text.__cxa_deleted_virtual:

00000000 <__cxa_deleted_virtual>:
   0:	0e 94 00 00 	call	0	; 0x0 <__cxa_deleted_virtual>

hooks.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000027c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000723  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__empty 00000002  00000000  00000000  000009d3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .comment      00000012  00000000  00000000  000009d5  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__empty:

00000000 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
   0:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000774  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011ca  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.atexit  00000006  00000000  00000000  00001972  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text.initVariant 00000002  00000000  00000000  00001978  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._Z8setupUSBv 00000002  00000000  00000000  0000197a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.startup.main 0000001e  00000000  00000000  0000197c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .comment      00000012  00000000  00000000  0000199a  2**0
                  CONTENTS, READONLY

Disassembly of section .text.atexit:

00000000 <atexit>:
*/

#include <Arduino.h>

// Declared weak in Arduino.h to allow user redefinitions.
int atexit(void (* /*func*/ )()) { return 0; }
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	08 95       	ret

Disassembly of section .text.initVariant:

00000000 <initVariant>:
   0:	08 95       	ret

Disassembly of section .text._Z8setupUSBv:

00000000 <_Z8setupUSBv>:
   0:	08 95       	ret

Disassembly of section .text.startup.main:

00000000 <main>:
   0:	0e 94 00 00 	call	0	; 0x0 <main>
   4:	0e 94 00 00 	call	0	; 0x0 <main>
   8:	0e 94 00 00 	call	0	; 0x0 <main>
   c:	c0 e0       	ldi	r28, 0x00	; 0
   e:	d0 e0       	ldi	r29, 0x00	; 0
  10:	0e 94 00 00 	call	0	; 0x0 <main>
  14:	20 97       	sbiw	r28, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <main+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <main>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <__zero_reg__+0x1d>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000420  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a0e  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Znwj   00000004  00000000  00000000  00000e62  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Znaj   00000004  00000000  00000000  00000e66  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZdlPv  00000004  00000000  00000000  00000e6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZdaPv  00000004  00000000  00000000  00000e6e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .comment      00000012  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY

Disassembly of section .text._Znwj:

00000000 <_Znwj>:
*/

#include <stdlib.h>

void *operator new(size_t size) {
  return malloc(size);
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Znwj>

Disassembly of section .text._Znaj:

00000000 <_Znaj>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_Znaj>

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZdlPv>

Disassembly of section .text._ZdaPv:

00000000 <_ZdaPv>:
   0:	0c 94 00 00 	jmp	0	; 0x0 <_ZdaPv>

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a50  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000011ba  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_16 00000094  00000000  00000000  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.millis  00000018  00000000  00000000  00001cd2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.micros  0000004a  00000000  00000000  00001cea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.delay   00000078  00000000  00000000  00001d34  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delayMicroseconds 00000016  00000000  00000000  00001dac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.init    00000076  00000000  00000000  00001dc2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss.timer0_fract 00000001  00000000  00000000  00001e38  2**0
                  ALLOC
 12 .bss.timer0_millis 00000004  00000000  00000000  00001e38  2**0
                  ALLOC
 13 .bss.timer0_overflow_count 00000004  00000000  00000000  00001e38  2**0
                  ALLOC
 14 .comment      00000012  00000000  00000000  00001e38  2**0
                  CONTENTS, READONLY

Disassembly of section .text.__vector_16:

00000000 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
  14:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  16:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1a:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  1e:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  22:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
	unsigned char f = timer0_fract;
  26:	30 91 00 00 	lds	r19, 0x0000	; 0x800000 <__SREG__+0x7fffc1>

	m += MILLIS_INC;
	f += FRACT_INC;
  2a:	23 e0       	ldi	r18, 0x03	; 3
  2c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
  2e:	2d 37       	cpi	r18, 0x7D	; 125
  30:	00 f4       	brcc	.+0      	; 0x32 <__vector_16+0x32>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	a1 1d       	adc	r26, r1
  36:	b1 1d       	adc	r27, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <__vector_16+0x3a>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
  3a:	26 e8       	ldi	r18, 0x86	; 134
  3c:	23 0f       	add	r18, r19
		m += 1;
  3e:	02 96       	adiw	r24, 0x02	; 2
  40:	a1 1d       	adc	r26, r1
  42:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
  44:	20 93 00 00 	sts	0x0000, r18	; 0x800000 <__SREG__+0x7fffc1>
	timer0_millis = m;
  48:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  4c:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  50:	a0 93 00 00 	sts	0x0000, r26	; 0x800000 <__SREG__+0x7fffc1>
  54:	b0 93 00 00 	sts	0x0000, r27	; 0x800000 <__SREG__+0x7fffc1>
	timer0_overflow_count++;
  58:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  5c:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  60:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  64:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	a1 1d       	adc	r26, r1
  6c:	b1 1d       	adc	r27, r1
  6e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
  72:	90 93 00 00 	sts	0x0000, r25	; 0x800000 <__SREG__+0x7fffc1>
  76:	a0 93 00 00 	sts	0x0000, r26	; 0x800000 <__SREG__+0x7fffc1>
  7a:	b0 93 00 00 	sts	0x0000, r27	; 0x800000 <__SREG__+0x7fffc1>
}
  7e:	bf 91       	pop	r27
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	3f 91       	pop	r19
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
  92:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	2f b7       	in	r18, 0x3f	; 63
   2:	f8 94       	cli
   4:	60 91 00 00 	lds	r22, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	70 91 00 00 	lds	r23, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   c:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  10:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  14:	2f bf       	out	0x3f, r18	; 63
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  16:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	3f b7       	in	r19, 0x3f	; 63
   2:	f8 94       	cli
   4:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   8:	90 91 00 00 	lds	r25, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   c:	a0 91 00 00 	lds	r26, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  10:	b0 91 00 00 	lds	r27, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
  14:	26 b5       	in	r18, 0x26	; 38
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  16:	a8 9b       	sbis	0x15, 0	; 21
  18:	00 c0       	rjmp	.+0      	; 0x1a <micros+0x1a>
  1a:	2f 3f       	cpi	r18, 0xFF	; 255
  1c:	01 f0       	breq	.+0      	; 0x1e <micros+0x1e>
  1e:	01 96       	adiw	r24, 0x01	; 1
  20:	a1 1d       	adc	r26, r1
  22:	b1 1d       	adc	r27, r1
  24:	3f bf       	out	0x3f, r19	; 63
	unsigned char f = timer0_fract;
  26:	ba 2f       	mov	r27, r26
  28:	a9 2f       	mov	r26, r25

	m += MILLIS_INC;
	f += FRACT_INC;
  2a:	98 2f       	mov	r25, r24
  2c:	88 27       	eor	r24, r24
	if (f >= FRACT_MAX) {
  2e:	82 0f       	add	r24, r18
  30:	91 1d       	adc	r25, r1
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  32:	a1 1d       	adc	r26, r1
  34:	b1 1d       	adc	r27, r1
  36:	bc 01       	movw	r22, r24
  38:	cd 01       	movw	r24, r26
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
  3a:	42 e0       	ldi	r20, 0x02	; 2
  3c:	66 0f       	add	r22, r22
		m += 1;
  3e:	77 1f       	adc	r23, r23
  40:	88 1f       	adc	r24, r24
  42:	99 1f       	adc	r25, r25
	}

	timer0_fract = f;
  44:	4a 95       	dec	r20
  46:	01 f4       	brne	.+0      	; 0x48 <micros+0x48>
	timer0_millis = m;
  48:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	6b 01       	movw	r12, r22
  12:	7c 01       	movw	r14, r24
  14:	0e 94 00 00 	call	0	; 0x0 <delay>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  18:	4b 01       	movw	r8, r22
  1a:	5c 01       	movw	r10, r24
  1c:	c1 14       	cp	r12, r1
  1e:	d1 04       	cpc	r13, r1
  20:	e1 04       	cpc	r14, r1
  22:	f1 04       	cpc	r15, r1
  24:	01 f0       	breq	.+0      	; 0x26 <delay+0x26>
	unsigned char f = timer0_fract;
  26:	0e 94 00 00 	call	0	; 0x0 <delay>

	m += MILLIS_INC;
	f += FRACT_INC;
  2a:	0e 94 00 00 	call	0	; 0x0 <delay>
	if (f >= FRACT_MAX) {
  2e:	dc 01       	movw	r26, r24
  30:	cb 01       	movw	r24, r22
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  32:	88 19       	sub	r24, r8
  34:	99 09       	sbc	r25, r9
  36:	aa 09       	sbc	r26, r10
  38:	bb 09       	sbc	r27, r11
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
  3a:	88 3e       	cpi	r24, 0xE8	; 232
  3c:	93 40       	sbci	r25, 0x03	; 3
		m += 1;
  3e:	a1 05       	cpc	r26, r1
  40:	b1 05       	cpc	r27, r1
  42:	00 f0       	brcs	.+0      	; 0x44 <delay+0x44>
	}

	timer0_fract = f;
  44:	21 e0       	ldi	r18, 0x01	; 1
  46:	c2 1a       	sub	r12, r18
	timer0_millis = m;
  48:	d1 08       	sbc	r13, r1
  4a:	e1 08       	sbc	r14, r1
  4c:	f1 08       	sbc	r15, r1
  4e:	88 ee       	ldi	r24, 0xE8	; 232
  50:	88 0e       	add	r8, r24
  52:	83 e0       	ldi	r24, 0x03	; 3
  54:	98 1e       	adc	r9, r24
  56:	a1 1c       	adc	r10, r1
	timer0_overflow_count++;
  58:	b1 1c       	adc	r11, r1
  5a:	c1 14       	cp	r12, r1
  5c:	d1 04       	cpc	r13, r1
  5e:	e1 04       	cpc	r14, r1
  60:	f1 04       	cpc	r15, r1
  62:	01 f4       	brne	.+0      	; 0x64 <delay+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <delay+0x66>
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	cf 90       	pop	r12
  6e:	bf 90       	pop	r11
  70:	af 90       	pop	r10
  72:	9f 90       	pop	r9
  74:	8f 90       	pop	r8
  76:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	91 05       	cpc	r25, r1
   4:	00 f0       	brcs	.+0      	; 0x6 <delayMicroseconds+0x6>
   6:	88 0f       	add	r24, r24
   8:	99 1f       	adc	r25, r25
   a:	88 0f       	add	r24, r24
   c:	99 1f       	adc	r25, r25
   e:	05 97       	sbiw	r24, 0x05	; 5
  10:	01 97       	sbiw	r24, 0x01	; 1
  12:	01 f4       	brne	.+0      	; 0x14 <delayMicroseconds+0x14>
  14:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:
   0:	78 94       	sei
   2:	84 b5       	in	r24, 0x24	; 36
   4:	82 60       	ori	r24, 0x02	; 2
   6:	84 bd       	out	0x24, r24	; 36
   8:	84 b5       	in	r24, 0x24	; 36
   a:	81 60       	ori	r24, 0x01	; 1
   c:	84 bd       	out	0x24, r24	; 36
   e:	85 b5       	in	r24, 0x25	; 37
  10:	82 60       	ori	r24, 0x02	; 2
  12:	85 bd       	out	0x25, r24	; 37
  14:	85 b5       	in	r24, 0x25	; 37
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  16:	81 60       	ori	r24, 0x01	; 1
  18:	85 bd       	out	0x25, r24	; 37
  1a:	ee e6       	ldi	r30, 0x6E	; 110
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	81 60       	ori	r24, 0x01	; 1
  22:	80 83       	st	Z, r24
  24:	e1 e8       	ldi	r30, 0x81	; 129
	unsigned char f = timer0_fract;
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	10 82       	st	Z, r1

	m += MILLIS_INC;
	f += FRACT_INC;
  2a:	80 81       	ld	r24, Z
  2c:	82 60       	ori	r24, 0x02	; 2
	if (f >= FRACT_MAX) {
  2e:	80 83       	st	Z, r24
  30:	80 81       	ld	r24, Z
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
  32:	81 60       	ori	r24, 0x01	; 1
  34:	80 83       	st	Z, r24
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
  3a:	80 81       	ld	r24, Z
  3c:	81 60       	ori	r24, 0x01	; 1
		m += 1;
  3e:	80 83       	st	Z, r24
  40:	e1 eb       	ldi	r30, 0xB1	; 177
  42:	f0 e0       	ldi	r31, 0x00	; 0
	}

	timer0_fract = f;
  44:	80 81       	ld	r24, Z
  46:	84 60       	ori	r24, 0x04	; 4
	timer0_millis = m;
  48:	80 83       	st	Z, r24
  4a:	e0 eb       	ldi	r30, 0xB0	; 176
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 83       	st	Z, r24
  54:	ea e7       	ldi	r30, 0x7A	; 122
  56:	f0 e0       	ldi	r31, 0x00	; 0
	timer0_overflow_count++;
  58:	80 81       	ld	r24, Z
  5a:	84 60       	ori	r24, 0x04	; 4
  5c:	80 83       	st	Z, r24
  5e:	80 81       	ld	r24, Z
  60:	82 60       	ori	r24, 0x02	; 2
  62:	80 83       	st	Z, r24
  64:	80 81       	ld	r24, Z
  66:	81 60       	ori	r24, 0x01	; 1
  68:	80 83       	st	Z, r24
  6a:	80 81       	ld	r24, Z
  6c:	80 68       	ori	r24, 0x80	; 128
  6e:	80 83       	st	Z, r24
  70:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__SREG__+0x800082>
  74:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000008e8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000115c  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  00001a78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 0000003a  00000000  00000000  00001a7e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000000be  00000000  00000000  00001ab8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .comment      00000012  00000000  00000000  00001b77  2**0
                  CONTENTS, READONLY

Disassembly of section .text.analogReference:

00000000 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   0:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__SREG__+0x7fffc1>
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:
   0:	8e 30       	cpi	r24, 0x0E	; 14
   2:	00 f0       	brcs	.+0      	; 0x4 <analogRead+0x4>
   4:	8e 50       	subi	r24, 0x0E	; 14
   6:	87 70       	andi	r24, 0x07	; 7
   8:	20 91 00 00 	lds	r18, 0x0000	; 0x800000 <__SREG__+0x7fffc1>
   c:	90 e4       	ldi	r25, 0x40	; 64
   e:	29 9f       	mul	r18, r25
  10:	90 01       	movw	r18, r0
  12:	11 24       	eor	r1, r1
  14:	82 2b       	or	r24, r18
  16:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__SREG__+0x80003d>
  1a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__SREG__+0x80003b>
  1e:	80 64       	ori	r24, 0x40	; 64
  20:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__SREG__+0x80003b>
  24:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__SREG__+0x80003b>
  28:	86 fd       	sbrc	r24, 6
  2a:	00 c0       	rjmp	.+0      	; 0x2c <analogRead+0x2c>
  2c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__SREG__+0x800039>
  30:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__SREG__+0x80003a>
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	92 2b       	or	r25, r18
  38:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
  14:	60 e0       	ldi	r22, 0x00	; 0
  16:	00 c0       	rjmp	.+0      	; 0x18 <analogWrite+0x18>
  18:	cf 3f       	cpi	r28, 0xFF	; 255
  1a:	d1 05       	cpc	r29, r1
  1c:	01 f4       	brne	.+0      	; 0x1e <analogWrite+0x1e>
  1e:	61 e0       	ldi	r22, 0x01	; 1
  20:	81 2f       	mov	r24, r17
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	1f 91       	pop	r17
  28:	0c 94 00 00 	jmp	0	; 0x0 <analogWrite>
  2c:	e1 2f       	mov	r30, r17
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	e0 50       	subi	r30, 0x00	; 0
  32:	f0 40       	sbci	r31, 0x00	; 0
  34:	e4 91       	lpm	r30, Z
  36:	e3 30       	cpi	r30, 0x03	; 3
  38:	01 f0       	breq	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	00 f4       	brcc	.+0      	; 0x3c <analogWrite+0x3c>
  3c:	e1 30       	cpi	r30, 0x01	; 1
  3e:	01 f0       	breq	.+0      	; 0x40 <analogWrite+0x40>
  40:	e2 30       	cpi	r30, 0x02	; 2
  42:	01 f4       	brne	.+0      	; 0x44 <analogWrite+0x44>
  44:	84 b5       	in	r24, 0x24	; 36
  46:	80 62       	ori	r24, 0x20	; 32
  48:	84 bd       	out	0x24, r24	; 36
  4a:	c8 bd       	out	0x28, r28	; 40
  4c:	00 c0       	rjmp	.+0      	; 0x4e <analogWrite+0x4e>
  4e:	e7 30       	cpi	r30, 0x07	; 7
  50:	01 f0       	breq	.+0      	; 0x52 <analogWrite+0x52>
  52:	e8 30       	cpi	r30, 0x08	; 8
  54:	01 f0       	breq	.+0      	; 0x56 <analogWrite+0x56>
  56:	e4 30       	cpi	r30, 0x04	; 4
  58:	01 f4       	brne	.+0      	; 0x5a <analogWrite+0x5a>
  5a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__SREG__+0x800041>
  5e:	80 62       	ori	r24, 0x20	; 32
  60:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__SREG__+0x800041>
  64:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__SREG__+0x80004c>
  68:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__SREG__+0x80004b>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <analogWrite+0x6e>
  6e:	84 b5       	in	r24, 0x24	; 36
  70:	80 68       	ori	r24, 0x80	; 128
  72:	84 bd       	out	0x24, r24	; 36
  74:	c7 bd       	out	0x27, r28	; 39
  76:	00 c0       	rjmp	.+0      	; 0x78 <analogWrite+0x78>
  78:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__SREG__+0x800041>
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__SREG__+0x800041>
  82:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__SREG__+0x80004a>
  86:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__SREG__+0x800049>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <analogWrite+0x8c>
  8c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__SREG__+0x800071>
  90:	80 68       	ori	r24, 0x80	; 128
  92:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__SREG__+0x800071>
  96:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__SREG__+0x800074>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <analogWrite+0x9c>
  9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__SREG__+0x800071>
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__SREG__+0x800071>
  a6:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__SREG__+0x800075>
  aa:	00 c0       	rjmp	.+0      	; 0xac <analogWrite+0xac>
  ac:	c0 38       	cpi	r28, 0x80	; 128
  ae:	d1 05       	cpc	r29, r1
  b0:	04 f0       	brlt	.+0      	; 0xb2 <analogWrite+0xb2>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <analogWrite+0xb4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <analogWrite+0xb6>
  b6:	df 91       	pop	r29
  b8:	cf 91       	pop	r28
  ba:	1f 91       	pop	r17
  bc:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b28  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000012e9  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.turnOffPWM 00000052  00000000  00000000  00001e45  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pinMode 00000078  00000000  00000000  00001e97  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 00000060  00000000  00000000  00001f0f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 00000052  00000000  00000000  00001f6f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data.digital_pin_to_timer_PGM 00000014  00000000  00000000  00001fc1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .progmem.data.digital_pin_to_bit_mask_PGM 00000014  00000000  00000000  00001fd5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .progmem.data.digital_pin_to_port_PGM 00000014  00000000  00000000  00001fe9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .progmem.data.port_to_input_PGM 0000000a  00000000  00000000  00001ffd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .progmem.data.port_to_output_PGM 0000000a  00000000  00000000  00002007  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .progmem.data.port_to_mode_PGM 0000000a  00000000  00000000  00002011  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .comment      00000012  00000000  00000000  0000201b  2**0
                  CONTENTS, READONLY

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   0:	83 30       	cpi	r24, 0x03	; 3
   2:	01 f0       	breq	.+0      	; 0x4 <turnOffPWM+0x4>
   4:	00 f4       	brcc	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	81 30       	cpi	r24, 0x01	; 1
   8:	01 f0       	breq	.+0      	; 0xa <turnOffPWM+0xa>
   a:	82 30       	cpi	r24, 0x02	; 2
   c:	01 f0       	breq	.+0      	; 0xe <turnOffPWM+0xe>
   e:	08 95       	ret
  10:	87 30       	cpi	r24, 0x07	; 7
  12:	01 f0       	breq	.+0      	; 0x14 <turnOffPWM+0x14>
  14:	88 30       	cpi	r24, 0x08	; 8
  16:	01 f0       	breq	.+0      	; 0x18 <turnOffPWM+0x18>
  18:	84 30       	cpi	r24, 0x04	; 4
  1a:	01 f4       	brne	.+0      	; 0x1c <turnOffPWM+0x1c>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  1c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__SREG__+0x800041>
  20:	8f 7d       	andi	r24, 0xDF	; 223
  22:	00 c0       	rjmp	.+0      	; 0x24 <turnOffPWM+0x24>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__SREG__+0x800041>
  28:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  2a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__SREG__+0x800041>
  2e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  30:	84 b5       	in	r24, 0x24	; 36
  32:	8f 77       	andi	r24, 0x7F	; 127
  34:	00 c0       	rjmp	.+0      	; 0x36 <turnOffPWM+0x36>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  36:	84 b5       	in	r24, 0x24	; 36
  38:	8f 7d       	andi	r24, 0xDF	; 223
  3a:	84 bd       	out	0x24, r24	; 36
  3c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  3e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__SREG__+0x800071>
  42:	8f 77       	andi	r24, 0x7F	; 127
  44:	00 c0       	rjmp	.+0      	; 0x46 <turnOffPWM+0x46>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  46:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__SREG__+0x800071>
  4a:	8f 7d       	andi	r24, 0xDF	; 223
  4c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__SREG__+0x800071>
  50:	08 95       	ret

Disassembly of section .text.pinMode:

00000000 <pinMode>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	e0 50       	subi	r30, 0x00	; 0
   a:	f0 40       	sbci	r31, 0x00	; 0
   c:	24 91       	lpm	r18, Z
   e:	fc 01       	movw	r30, r24
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	84 91       	lpm	r24, Z
  16:	88 23       	and	r24, r24
  18:	01 f0       	breq	.+0      	; 0x1a <pinMode+0x1a>
  1a:	90 e0       	ldi	r25, 0x00	; 0
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  1c:	88 0f       	add	r24, r24
  1e:	99 1f       	adc	r25, r25
  20:	fc 01       	movw	r30, r24
  22:	e0 50       	subi	r30, 0x00	; 0
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	c5 91       	lpm	r28, Z+
  28:	d4 91       	lpm	r29, Z
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  2a:	fc 01       	movw	r30, r24
  2c:	e0 50       	subi	r30, 0x00	; 0
  2e:	f0 40       	sbci	r31, 0x00	; 0
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  30:	a5 91       	lpm	r26, Z+
  32:	b4 91       	lpm	r27, Z
  34:	61 11       	cpse	r22, r1
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  36:	00 c0       	rjmp	.+0      	; 0x38 <pinMode+0x38>
  38:	9f b7       	in	r25, 0x3f	; 63
  3a:	f8 94       	cli
  3c:	88 81       	ld	r24, Y
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  3e:	20 95       	com	r18
  40:	82 23       	and	r24, r18
  42:	88 83       	st	Y, r24
  44:	ec 91       	ld	r30, X
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  46:	2e 23       	and	r18, r30
  48:	00 c0       	rjmp	.+0      	; 0x4a <pinMode+0x4a>
  4a:	62 30       	cpi	r22, 0x02	; 2
  4c:	01 f4       	brne	.+0      	; 0x4e <pinMode+0x4e>
  4e:	9f b7       	in	r25, 0x3f	; 63
  50:	f8 94       	cli
  52:	38 81       	ld	r19, Y
  54:	82 2f       	mov	r24, r18
  56:	80 95       	com	r24
  58:	83 23       	and	r24, r19
  5a:	88 83       	st	Y, r24
  5c:	ec 91       	ld	r30, X
  5e:	2e 2b       	or	r18, r30
  60:	2c 93       	st	X, r18
  62:	9f bf       	out	0x3f, r25	; 63
  64:	00 c0       	rjmp	.+0      	; 0x66 <pinMode+0x66>
  66:	8f b7       	in	r24, 0x3f	; 63
  68:	f8 94       	cli
  6a:	e8 81       	ld	r30, Y
  6c:	2e 2b       	or	r18, r30
  6e:	28 83       	st	Y, r18
  70:	8f bf       	out	0x3f, r24	; 63
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	28 2f       	mov	r18, r24
   8:	30 e0       	ldi	r19, 0x00	; 0
   a:	f9 01       	movw	r30, r18
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	84 91       	lpm	r24, Z
  12:	f9 01       	movw	r30, r18
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
  18:	d4 91       	lpm	r29, Z
  1a:	f9 01       	movw	r30, r18
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0
  20:	c4 91       	lpm	r28, Z
  22:	cc 23       	and	r28, r28
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  24:	01 f0       	breq	.+0      	; 0x26 <digitalWrite+0x26>
  26:	16 2f       	mov	r17, r22
  28:	81 11       	cpse	r24, r1
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  2a:	0e 94 00 00 	call	0	; 0x0 <digitalWrite>
  2e:	ec 2f       	mov	r30, r28
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  30:	f0 e0       	ldi	r31, 0x00	; 0
  32:	ee 0f       	add	r30, r30
  34:	ff 1f       	adc	r31, r31
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  36:	e0 50       	subi	r30, 0x00	; 0
  38:	f0 40       	sbci	r31, 0x00	; 0
  3a:	a5 91       	lpm	r26, Z+
  3c:	b4 91       	lpm	r27, Z
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  3e:	8f b7       	in	r24, 0x3f	; 63
  40:	f8 94       	cli
  42:	11 11       	cpse	r17, r1
  44:	00 c0       	rjmp	.+0      	; 0x46 <digitalWrite+0x46>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  46:	9c 91       	ld	r25, X
  48:	ed 2f       	mov	r30, r29
  4a:	e0 95       	com	r30
  4c:	e9 23       	and	r30, r25
  4e:	00 c0       	rjmp	.+0      	; 0x50 <digitalWrite+0x50>
  50:	ec 91       	ld	r30, X
  52:	ed 2b       	or	r30, r29
  54:	ec 93       	st	X, r30
  56:	8f bf       	out	0x3f, r24	; 63
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	28 2f       	mov	r18, r24
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	f9 01       	movw	r30, r18
   a:	e0 50       	subi	r30, 0x00	; 0
   c:	f0 40       	sbci	r31, 0x00	; 0
   e:	84 91       	lpm	r24, Z
  10:	f9 01       	movw	r30, r18
  12:	e0 50       	subi	r30, 0x00	; 0
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	d4 91       	lpm	r29, Z
  18:	f9 01       	movw	r30, r18
  1a:	e0 50       	subi	r30, 0x00	; 0
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  1c:	f0 40       	sbci	r31, 0x00	; 0
  1e:	c4 91       	lpm	r28, Z
  20:	cc 23       	and	r28, r28
  22:	01 f0       	breq	.+0      	; 0x24 <digitalRead+0x24>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  24:	81 11       	cpse	r24, r1
  26:	0e 94 00 00 	call	0	; 0x0 <digitalRead>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  2a:	ec 2f       	mov	r30, r28
  2c:	f0 e0       	ldi	r31, 0x00	; 0
  2e:	ee 0f       	add	r30, r30
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  30:	ff 1f       	adc	r31, r31
  32:	e0 50       	subi	r30, 0x00	; 0
  34:	f0 40       	sbci	r31, 0x00	; 0
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  36:	a5 91       	lpm	r26, Z+
  38:	b4 91       	lpm	r27, Z
  3a:	ec 91       	ld	r30, X
  3c:	ed 23       	and	r30, r29
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	01 f4       	brne	.+0      	; 0x44 <digitalRead+0x44>
  44:	80 e0       	ldi	r24, 0x00	; 0
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  46:	00 c0       	rjmp	.+0      	; 0x48 <digitalRead+0x48>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000894  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001185  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 00000064  00000000  00000000  00001a4d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pulseInLong 0000010a  00000000  00000000  00001ab1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000012  00000000  00000000  00001bbb  2**0
                  CONTENTS, READONLY

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	e0 50       	subi	r30, 0x00	; 0
   a:	f0 40       	sbci	r31, 0x00	; 0
   c:	74 91       	lpm	r23, Z
	uint8_t port = digitalPinToPort(pin);
   e:	fc 01       	movw	r30, r24
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	e4 91       	lpm	r30, Z
	uint8_t stateMask = (state ? bit : 0);
  16:	66 23       	and	r22, r22
  18:	01 f0       	breq	.+0      	; 0x1a <pulseIn+0x1a>
  1a:	67 2f       	mov	r22, r23
  1c:	00 c0       	rjmp	.+0      	; 0x1e <pulseIn+0x1e>
  1e:	60 e0       	ldi	r22, 0x00	; 0

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	ee 0f       	add	r30, r30
  24:	ff 1f       	adc	r31, r31
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	85 91       	lpm	r24, Z+
  2c:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
  2e:	89 01       	movw	r16, r18
  30:	9a 01       	movw	r18, r20
  32:	3f 70       	andi	r19, 0x0F	; 15

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
  34:	46 2f       	mov	r20, r22
  36:	67 2f       	mov	r22, r23
  38:	0e 94 00 00 	call	0	; 0x0 <pulseIn>

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
  3c:	61 15       	cp	r22, r1
  3e:	71 05       	cpc	r23, r1
  40:	81 05       	cpc	r24, r1
  42:	91 05       	cpc	r25, r1
  44:	01 f0       	breq	.+0      	; 0x46 <pulseIn+0x46>
		return clockCyclesToMicroseconds(width * 16 + 16);
  46:	dc 01       	movw	r26, r24
  48:	cb 01       	movw	r24, r22
  4a:	01 96       	adiw	r24, 0x01	; 1
  4c:	a1 1d       	adc	r26, r1
  4e:	b1 1d       	adc	r27, r1
  50:	bc 01       	movw	r22, r24
  52:	cd 01       	movw	r24, r26
  54:	9f 70       	andi	r25, 0x0F	; 15
  56:	00 c0       	rjmp	.+0      	; 0x58 <pulseIn+0x58>
	else
		return 0;
  58:	60 e0       	ldi	r22, 0x00	; 0
  5a:	70 e0       	ldi	r23, 0x00	; 0
  5c:	cb 01       	movw	r24, r22
}
  5e:	1f 91       	pop	r17
  60:	0f 91       	pop	r16
  62:	08 95       	ret

Disassembly of section .text.pulseInLong:

00000000 <pulseInLong>:
 * before the start of the pulse.
 *
 * This function performs better with short pulses in noInterrupt() context
 */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
	uint8_t port = digitalPinToPort(pin);
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
	uint8_t stateMask = (state ? bit : 0);
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  1e:	df 93       	push	r29

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
  20:	69 01       	movw	r12, r18
  22:	7a 01       	movw	r14, r20
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	fc 01       	movw	r30, r24
  28:	e0 50       	subi	r30, 0x00	; 0
  2a:	f0 40       	sbci	r31, 0x00	; 0
  2c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
	uint8_t stateMask = (state ? bit : 0);

	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes approximately 16 clock cycles per iteration
	unsigned long maxloops = microsecondsToClockCycles(timeout)/16;
  2e:	fc 01       	movw	r30, r24
  30:	e0 50       	subi	r30, 0x00	; 0
  32:	f0 40       	sbci	r31, 0x00	; 0

	unsigned long width = countPulseASM(portInputRegister(port), bit, stateMask, maxloops);
  34:	c4 91       	lpm	r28, Z
  36:	66 23       	and	r22, r22
  38:	01 f0       	breq	.+0      	; 0x3a <pulseInLong+0x3a>
  3a:	01 2f       	mov	r16, r17

	// prevent clockCyclesToMicroseconds to return bogus values if countPulseASM timed out
	if (width)
  3c:	00 c0       	rjmp	.+0      	; 0x3e <pulseInLong+0x3e>
  3e:	00 e0       	ldi	r16, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <pulseInLong>
  44:	4b 01       	movw	r8, r22
		return clockCyclesToMicroseconds(width * 16 + 16);
  46:	5c 01       	movw	r10, r24
  48:	d0 e0       	ldi	r29, 0x00	; 0
  4a:	cc 0f       	add	r28, r28
  4c:	dd 1f       	adc	r29, r29
  4e:	c0 50       	subi	r28, 0x00	; 0
  50:	d0 40       	sbci	r29, 0x00	; 0
  52:	fe 01       	movw	r30, r28
  54:	a5 91       	lpm	r26, Z+
  56:	b4 91       	lpm	r27, Z
	else
		return 0;
  58:	8c 91       	ld	r24, X
  5a:	81 23       	and	r24, r17
  5c:	80 13       	cpse	r24, r16
}
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pulseInLong+0x60>
  60:	0e 94 00 00 	call	0	; 0x0 <pulseInLong>
  64:	dc 01       	movw	r26, r24
  66:	cb 01       	movw	r24, r22
  68:	88 19       	sub	r24, r8
  6a:	99 09       	sbc	r25, r9
  6c:	aa 09       	sbc	r26, r10
  6e:	bb 09       	sbc	r27, r11
  70:	c8 16       	cp	r12, r24
  72:	d9 06       	cpc	r13, r25
  74:	ea 06       	cpc	r14, r26
  76:	fb 06       	cpc	r15, r27
  78:	00 f4       	brcc	.+0      	; 0x7a <pulseInLong+0x7a>
  7a:	60 e0       	ldi	r22, 0x00	; 0
  7c:	70 e0       	ldi	r23, 0x00	; 0
  7e:	cb 01       	movw	r24, r22
  80:	00 c0       	rjmp	.+0      	; 0x82 <pulseInLong+0x82>
  82:	0e 94 00 00 	call	0	; 0x0 <pulseInLong>
  86:	dc 01       	movw	r26, r24
  88:	cb 01       	movw	r24, r22
  8a:	88 19       	sub	r24, r8
  8c:	99 09       	sbc	r25, r9
  8e:	aa 09       	sbc	r26, r10
  90:	bb 09       	sbc	r27, r11
  92:	c8 16       	cp	r12, r24
  94:	d9 06       	cpc	r13, r25
  96:	ea 06       	cpc	r14, r26
  98:	fb 06       	cpc	r15, r27
  9a:	00 f0       	brcs	.+0      	; 0x9c <pulseInLong+0x9c>
  9c:	fe 01       	movw	r30, r28
  9e:	a5 91       	lpm	r26, Z+
  a0:	b4 91       	lpm	r27, Z
  a2:	8c 91       	ld	r24, X
  a4:	81 23       	and	r24, r17
  a6:	80 13       	cpse	r24, r16
  a8:	00 c0       	rjmp	.+0      	; 0xaa <pulseInLong+0xaa>
  aa:	0e 94 00 00 	call	0	; 0x0 <pulseInLong>
  ae:	2b 01       	movw	r4, r22
  b0:	3c 01       	movw	r6, r24
  b2:	fe 01       	movw	r30, r28
  b4:	a5 91       	lpm	r26, Z+
  b6:	b4 91       	lpm	r27, Z
  b8:	8c 91       	ld	r24, X
  ba:	81 23       	and	r24, r17
  bc:	80 13       	cpse	r24, r16
  be:	00 c0       	rjmp	.+0      	; 0xc0 <pulseInLong+0xc0>
  c0:	0e 94 00 00 	call	0	; 0x0 <pulseInLong>
  c4:	dc 01       	movw	r26, r24
  c6:	cb 01       	movw	r24, r22
  c8:	88 19       	sub	r24, r8
  ca:	99 09       	sbc	r25, r9
  cc:	aa 09       	sbc	r26, r10
  ce:	bb 09       	sbc	r27, r11
  d0:	c8 16       	cp	r12, r24
  d2:	d9 06       	cpc	r13, r25
  d4:	ea 06       	cpc	r14, r26
  d6:	fb 06       	cpc	r15, r27
  d8:	00 f4       	brcc	.+0      	; 0xda <pulseInLong+0xda>
  da:	00 c0       	rjmp	.+0      	; 0xdc <pulseInLong+0xdc>
  dc:	0e 94 00 00 	call	0	; 0x0 <pulseInLong>
  e0:	64 19       	sub	r22, r4
  e2:	75 09       	sbc	r23, r5
  e4:	86 09       	sbc	r24, r6
  e6:	97 09       	sbc	r25, r7
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	0f 91       	pop	r16
  f0:	ff 90       	pop	r15
  f2:	ef 90       	pop	r14
  f4:	df 90       	pop	r13
  f6:	cf 90       	pop	r12
  f8:	bf 90       	pop	r11
  fa:	af 90       	pop	r10
  fc:	9f 90       	pop	r9
  fe:	8f 90       	pop	r8
 100:	7f 90       	pop	r7
 102:	6f 90       	pop	r6
 104:	5f 90       	pop	r5
 106:	4f 90       	pop	r4
 108:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007c8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001156  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftIn 00000076  00000000  00000000  00001952  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftOut 00000076  00000000  00000000  000019c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .comment      00000012  00000000  00000000  00001a3e  2**0
                  CONTENTS, READONLY

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	f8 2e       	mov	r15, r24
  12:	d6 2f       	mov	r29, r22
  14:	e4 2e       	mov	r14, r20
  16:	07 e0       	ldi	r16, 0x07	; 7
  18:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t value = 0;
  1a:	c0 e0       	ldi	r28, 0x00	; 0
  1c:	87 e0       	ldi	r24, 0x07	; 7
  1e:	c8 2e       	mov	r12, r24
  20:	d1 2c       	mov	r13, r1
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
  22:	61 e0       	ldi	r22, 0x01	; 1
  24:	8d 2f       	mov	r24, r29
  26:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
  2a:	8f 2d       	mov	r24, r15
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
  2c:	e1 10       	cpse	r14, r1
  2e:	00 c0       	rjmp	.+0      	; 0x30 <shiftIn+0x30>
			value |= digitalRead(dataPin) << i;
  30:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  34:	96 01       	movw	r18, r12
  36:	20 1b       	sub	r18, r16
  38:	31 0b       	sbc	r19, r17
  3a:	00 c0       	rjmp	.+0      	; 0x3c <shiftIn+0x3c>
  3c:	88 0f       	add	r24, r24
  3e:	2a 95       	dec	r18
  40:	02 f4       	brpl	.+0      	; 0x42 <shiftIn+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <shiftIn+0x44>
		else
			value |= digitalRead(dataPin) << (7 - i);
  44:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  48:	00 2e       	mov	r0, r16
  4a:	00 c0       	rjmp	.+0      	; 0x4c <shiftIn+0x4c>
  4c:	88 0f       	add	r24, r24
  4e:	0a 94       	dec	r0
  50:	02 f4       	brpl	.+0      	; 0x52 <shiftIn+0x52>
  52:	c8 2b       	or	r28, r24
		digitalWrite(clockPin, LOW);
  54:	60 e0       	ldi	r22, 0x00	; 0
  56:	8d 2f       	mov	r24, r29
  58:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  5c:	01 50       	subi	r16, 0x01	; 1
  5e:	11 09       	sbc	r17, r1
  60:	00 f4       	brcc	.+0      	; 0x62 <shiftIn+0x62>
	}
	return value;
}
  62:	8c 2f       	mov	r24, r28
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	df 90       	pop	r13
  72:	cf 90       	pop	r12
  74:	08 95       	ret

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
  Boston, MA  02111-1307  USA
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	c8 2e       	mov	r12, r24
  14:	d6 2e       	mov	r13, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
	uint8_t value = 0;
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	02 2f       	mov	r16, r18
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	87 e0       	ldi	r24, 0x07	; 7
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
  22:	e8 2e       	mov	r14, r24
  24:	f1 2c       	mov	r15, r1
  26:	b1 10       	cpse	r11, r1
  28:	00 c0       	rjmp	.+0      	; 0x2a <shiftOut+0x2a>
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
  2a:	c7 01       	movw	r24, r14
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
  2c:	8c 1b       	sub	r24, r28
  2e:	9d 0b       	sbc	r25, r29
			value |= digitalRead(dataPin) << i;
  30:	98 01       	movw	r18, r16
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	98 01       	movw	r18, r16
  36:	8c 2f       	mov	r24, r28
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftOut+0x3a>
  3a:	35 95       	asr	r19
  3c:	27 95       	ror	r18
  3e:	8a 95       	dec	r24
  40:	02 f4       	brpl	.+0      	; 0x42 <shiftOut+0x42>
  42:	b9 01       	movw	r22, r18
		else
			value |= digitalRead(dataPin) << (7 - i);
  44:	61 70       	andi	r22, 0x01	; 1
  46:	77 27       	eor	r23, r23
  48:	8c 2d       	mov	r24, r12
  4a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  4e:	61 e0       	ldi	r22, 0x01	; 1
  50:	8d 2d       	mov	r24, r13
  52:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
		digitalWrite(clockPin, LOW);
  56:	60 e0       	ldi	r22, 0x00	; 0
  58:	8d 2d       	mov	r24, r13
  5a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  5e:	21 97       	sbiw	r28, 0x01	; 1
  60:	00 f4       	brcc	.+0      	; 0x62 <shiftOut+0x62>
	}
	return value;
}
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	1f 91       	pop	r17
  68:	0f 91       	pop	r16
  6a:	ff 90       	pop	r15
  6c:	ef 90       	pop	r14
  6e:	df 90       	pop	r13
  70:	cf 90       	pop	r12
  72:	bf 90       	pop	r11
  74:	08 95       	ret
